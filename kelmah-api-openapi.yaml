openapi: 3.0.3
info:
  title: Kelmah Platform API
  description: |
    Enterprise freelance marketplace API for vocational workers.

    **Platform Overview:**
    Kelmah connects skilled vocational workers (carpenters, masons, plumbers, electricians, etc.)
    with potential hirers through seamless job matching, real-time communication, and secure payments.

    **Architecture:**
    - **API Gateway**: Centralized routing through `/api/*` endpoints
    - **Microservices**: 6 specialized services (Auth, User, Job, Payment, Messaging, Review)
    - **Authentication**: JWT-based with refresh tokens
    - **Real-time**: WebSocket proxying for messaging
    - **Security**: Multi-layer authentication and rate limiting

    **Base URL:** `https://[tunnel-url]/api`
    **Authentication:** Bearer token in Authorization header
  version: 1.0.0
  contact:
    name: Kelmah Development Team
    email: support@kelmah.com
  license:
    name: Proprietary

servers:
  - url: https://shaggy-snake-43.loca.lt/api
    description: LocalTunnel Development Server
  - url: http://localhost:5000/api
    description: Local Development Server

security:
  - bearerAuth: []

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          description: Unique user identifier
        email:
          type: string
          format: email
        role:
          type: string
          enum: [worker, hirer, admin]
        firstName:
          type: string
        lastName:
          type: string
        isEmailVerified:
          type: boolean
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time

    Job:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        category:
          type: string
        budget:
          type: object
          properties:
            min:
              type: number
            max:
              type: number
            currency:
              type: string
              default: GHS
        location:
          type: object
          properties:
            address:
              type: string
            coordinates:
              type: array
              items:
                type: number
        status:
          type: string
          enum: [draft, published, in_progress, completed, cancelled]
        hirerId:
          type: string
        createdAt:
          type: string
          format: date-time

    Application:
      type: object
      properties:
        id:
          type: string
        jobId:
          type: string
        workerId:
          type: string
        status:
          type: string
          enum: [pending, accepted, rejected, withdrawn]
        proposedRate:
          type: number
        coverLetter:
          type: string
        createdAt:
          type: string
          format: date-time

    Message:
      type: object
      properties:
        id:
          type: string
        conversationId:
          type: string
        senderId:
          type: string
        content:
          type: string
        messageType:
          type: string
          enum: [text, image, file]
        attachments:
          type: array
          items:
            type: object
        createdAt:
          type: string
          format: date-time

    Conversation:
      type: object
      properties:
        id:
          type: string
        participants:
          type: array
          items:
            type: string
        lastMessage:
          $ref: '#/components/schemas/Message'
        createdAt:
          type: string
          format: date-time

    Review:
      type: object
      properties:
        id:
          type: string
        reviewerId:
          type: string
        revieweeId:
          type: string
        jobId:
          type: string
        rating:
          type: number
          minimum: 1
          maximum: 5
        comment:
          type: string
        createdAt:
          type: string
          format: date-time

    Payment:
      type: object
      properties:
        id:
          type: string
        jobId:
          type: string
        amount:
          type: number
        currency:
          type: string
          default: GHS
        status:
          type: string
          enum: [pending, held, released, refunded]
        escrowId:
          type: string
        createdAt:
          type: string
          format: date-time

    Error:
      type: object
      properties:
        success:
          type: boolean
          default: false
        message:
          type: string
        error:
          type: string
        code:
          type: string

  parameters:
    JobId:
      name: jobId
      in: path
      required: true
      schema:
        type: string
      description: Unique job identifier

    ConversationId:
      name: conversationId
      in: path
      required: true
      schema:
        type: string
      description: Unique conversation identifier

    MessageId:
      name: messageId
      in: path
      required: true
      schema:
        type: string
      description: Unique message identifier

    UserId:
      name: userId
      in: path
      required: true
      schema:
        type: string
      description: Unique user identifier

    ReviewId:
      name: reviewId
      in: path
      required: true
      schema:
        type: string
      description: Unique review identifier

paths:
  # Health & Status
  /health:
    get:
      summary: Gateway health check
      description: Check API Gateway health status
      tags: [Health]
      responses:
        200:
          description: Gateway is healthy
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: healthy
                  timestamp:
                    type: string
                    format: date-time
                  gateway:
                    type: string
                    example: API Gateway

  /health/aggregate:
    get:
      summary: Aggregate health check
      description: Check health status of all microservices
      tags: [Health]
      responses:
        200:
          description: Aggregate health status
          content:
            application/json:
              schema:
                type: object
                properties:
                  gateway:
                    type: string
                    example: healthy
                  services:
                    type: object
                    additionalProperties:
                      type: object
                      properties:
                        status:
                          type: string
                          enum: [healthy, unhealthy]
                        url:
                          type: string
                        responseTime:
                          type: string
                  timestamp:
                    type: string
                    format: date-time

  # Authentication
  /auth/login:
    post:
      summary: User login
      description: Authenticate user with email and password
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  minLength: 6
                  example: password123
      responses:
        200:
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Login successful
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
                      tokens:
                        type: object
                        properties:
                          accessToken:
                            type: string
                          refreshToken:
                            type: string
        401:
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/register:
    post:
      summary: User registration
      description: Register a new user account
      tags: [Authentication]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - firstName
                - lastName
                - role
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  minLength: 6
                firstName:
                  type: string
                lastName:
                  type: string
                role:
                  type: string
                  enum: [worker, hirer]
                phone:
                  type: string
      responses:
        201:
          description: Registration successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Registration successful
        400:
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/refresh:
    post:
      summary: Refresh access token
      description: Get new access token using refresh token
      tags: [Authentication]
      security: []
      responses:
        200:
          description: Token refreshed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  tokens:
                    type: object
                    properties:
                      accessToken:
                        type: string
                      refreshToken:
                        type: string

  /auth/logout:
    post:
      summary: User logout
      description: Invalidate current session
      tags: [Authentication]
      responses:
        200:
          description: Logout successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string

  # Jobs
  /jobs:
    get:
      summary: List jobs
      description: Get paginated list of jobs with optional filters
      tags: [Jobs]
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: category
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            type: string
            enum: [draft, published, in_progress, completed, cancelled]
        - name: location
          in: query
          schema:
            type: string
      responses:
        200:
          description: Jobs retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Job'
                  pagination:
                    type: object
                    properties:
                      page:
                        type: integer
                      limit:
                        type: integer
                      total:
                        type: integer
                      pages:
                        type: integer

    post:
      summary: Create job
      description: Create a new job posting (hirers only)
      tags: [Jobs]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
                - description
                - category
                - budget
              properties:
                title:
                  type: string
                  maxLength: 200
                description:
                  type: string
                category:
                  type: string
                budget:
                  type: object
                  properties:
                    min:
                      type: number
                      minimum: 0
                    max:
                      type: number
                      minimum: 0
                    currency:
                      type: string
                      default: GHS
                location:
                  type: object
                  properties:
                    address:
                      type: string
                    coordinates:
                      type: array
                      items:
                        type: number
                skills:
                  type: array
                  items:
                    type: string
      responses:
        201:
          description: Job created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/Job'

  /jobs/{jobId}:
    get:
      summary: Get job details
      description: Get detailed information about a specific job
      tags: [Jobs]
      parameters:
        - $ref: '#/components/parameters/JobId'
      responses:
        200:
          description: Job details retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/Job'

    put:
      summary: Update job
      description: Update job details (hirers only)
      tags: [Jobs]
      parameters:
        - $ref: '#/components/parameters/JobId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                category:
                  type: string
                budget:
                  type: object
                location:
                  type: object
                skills:
                  type: array
                  items:
                    type: string
      responses:
        200:
          description: Job updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/Job'

  /jobs/{jobId}/apply:
    post:
      summary: Apply to job
      description: Submit application for a job (workers only)
      tags: [Jobs]
      parameters:
        - $ref: '#/components/parameters/JobId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                proposedRate:
                  type: number
                  minimum: 0
                coverLetter:
                  type: string
                availability:
                  type: string
      responses:
        201:
          description: Application submitted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/Application'

  /jobs/{jobId}/applications:
    get:
      summary: Get job applications
      description: Get all applications for a job (hirers only)
      tags: [Jobs]
      parameters:
        - $ref: '#/components/parameters/JobId'
      responses:
        200:
          description: Applications retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Application'

  # Messaging
  /messages/conversations:
    get:
      summary: List conversations
      description: Get user's conversations
      tags: [Messaging]
      responses:
        200:
          description: Conversations retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Conversation'

    post:
      summary: Create conversation
      description: Start a new conversation
      tags: [Messaging]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - participants
              properties:
                participants:
                  type: array
                  items:
                    type: string
                  minItems: 2
                initialMessage:
                  type: string
      responses:
        201:
          description: Conversation created
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/Conversation'

  /messages/conversations/{conversationId}/messages:
    get:
      summary: Get conversation messages
      description: Get all messages in a conversation
      tags: [Messaging]
      parameters:
        - $ref: '#/components/parameters/ConversationId'
        - name: page
          in: query
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 50
      responses:
        200:
          description: Messages retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Message'

    post:
      summary: Send message
      description: Send a message in a conversation
      tags: [Messaging]
      parameters:
        - $ref: '#/components/parameters/ConversationId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - content
              properties:
                content:
                  type: string
                messageType:
                  type: string
                  enum: [text, image, file]
                  default: text
                attachments:
                  type: array
                  items:
                    type: object
      responses:
        201:
          description: Message sent
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/Message'

  # Reviews
  /reviews:
    post:
      summary: Submit review
      description: Submit a review for a completed job
      tags: [Reviews]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - jobId
                - revieweeId
                - rating
              properties:
                jobId:
                  type: string
                revieweeId:
                  type: string
                rating:
                  type: number
                  minimum: 1
                  maximum: 5
                comment:
                  type: string
      responses:
        201:
          description: Review submitted
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/Review'

  /reviews/worker/{userId}:
    get:
      summary: Get worker reviews
      description: Get all reviews for a worker
      tags: [Reviews]
      parameters:
        - $ref: '#/components/parameters/UserId'
      responses:
        200:
          description: Reviews retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Review'

  # Payments
  /payments/escrow:
    post:
      summary: Create escrow payment
      description: Create an escrow payment for a job
      tags: [Payments]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - jobId
                - amount
              properties:
                jobId:
                  type: string
                amount:
                  type: number
                  minimum: 0
                currency:
                  type: string
                  default: GHS
      responses:
        201:
          description: Escrow payment created
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/Payment'

  # Users
  /users/profile:
    get:
      summary: Get user profile
      description: Get current user's profile
      tags: [Users]
      responses:
        200:
          description: Profile retrieved
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/User'

    put:
      summary: Update user profile
      description: Update current user's profile
      tags: [Users]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                phone:
                  type: string
                bio:
                  type: string
                skills:
                  type: array
                  items:
                    type: string
                location:
                  type: object
      responses:
        200:
          description: Profile updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/User'

tags:
  - name: Authentication
    description: User authentication and authorization
  - name: Jobs
    description: Job posting, searching, and management
  - name: Messaging
    description: Real-time messaging and conversations
  - name: Reviews
    description: User reviews and ratings
  - name: Payments
    description: Payment processing and escrow
  - name: Users
    description: User profile management
  - name: Health
    description: System health monitoring
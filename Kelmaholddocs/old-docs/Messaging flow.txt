┌─────────────────────────── MESSAGING SYSTEM ARCHITECTURE ────────────────────────────┐
│                                                                                      │
│                               1. FRONTEND COMPONENTS                                 │
│                                                                                      │
│  ┌─────────────────────┐   ┌────────────────────────┐   ┌────────────────────────┐  │
│  │ MESSAGING PAGE      │   │  CONVERSATION LIST     │   │   CHAT COMPONENT       │  │
│  │                     │   │                        │   │                        │  │
│  │ /kelmah-frontend/   │   │ /kelmah-frontend/      │   │ /kelmah-frontend/      │  │
│  │ src/pages/MessagingPage.jsx│  │ src/components/messaging/│  │ src/components/messaging/│  │
│  │                     │   │ ConversationList.jsx   │   │ ChatComponent.jsx      │  │
│  │ • Main container    │   │                        │   │                        │  │
│  │ • Layout management │   │ • List conversations   │   │ • Display messages     │  │
│  │ • Mobile responsive │   │ • Select conversation  │   │ • Send messages        │  │
│  │ • Navigation        │   │ • Unread indicators    │   │ • Typing indicators    │  │
│  └─────────────────────┘   └────────────────────────┘   └────────────────────────┘  │
│            │                          │                            │                │
│            └──────────────────────────┼────────────────────────────┘                │
│                                       ▼                                             │
│  ┌─────────────────────────────────────────────────────────────────────────────┐   │
│  │                               MESSAGE CONTEXT                               │   │
│  │                                                                             │   │
│  │                      /kelmah-frontend/src/contexts/MessageContext.jsx       │   │
│  │                                                                             │   │
│  │  • State management for messages, conversations, and typing indicators      │   │
│  │  • Handles socket connection and events                                     │   │
│  │  • Provides message-related functions to components                         │   │
│  │  • Manages loading and error states                                         │   │
│  └────────────────────────────────────┬────────────────────────────────────────┘   │
│                                       │                                            │
│                                       ▼                                            │
│  ┌─────────────────────────────────────────────────────────────────────────────┐   │
│  │                           MESSAGING SERVICE                                 │   │
│  │                                                                             │   │
│  │                 /kelmah-frontend/src/services/messagingService.js           │   │
│  │                                                                             │   │
│  │  • Handles WebSocket connection                                             │   │
│  │  • API calls for messages and conversations                                 │   │
│  │  • Real-time events (typing, read receipts)                                 │   │
│  │  • Attachment handling                                                      │   │
│  └────────────────────────────────────┬────────────────────────────────────────┘   │
│                                       │                                            │
│                                       ▼                                            │
│                             SOCKET.IO CONNECTION                                   │
│                                       │                                            │
│                                       │                                            │
│─────────────────────────────────────────────────────────────────────────────────────│
│                                       │                                            │
│                                       ▼                                            │
│                                BACKEND SERVICES                                    │
│                                                                                    │
│  ┌─────────────────────────────────────────────────────────────────────────────┐  │
│  │                          MESSAGING SERVICE                                  │  │
│  │                                                                             │  │
│  │                /kelmah-backend/services/messaging-service/                  │  │
│  │                                                                             │  │
│  │  ┌─────────────────┐    ┌────────────────────┐   ┌───────────────────────┐ │  │
│  │  │  CONTROLLERS    │    │     MODELS         │   │   SOCKET HANDLERS     │ │  │
│  │  │                 │    │                    │   │                       │ │  │
│  │  │ conversation.   │    │ conversation.      │   │                       │ │  │
│  │  │ controller.js   │    │ model.js           │   │ messageSocket.js      │ │  │
│  │  │                 │    │                    │   │                       │ │  │
│  │  │ message.        │    │ message.model.js   │   │ • Real-time messaging │ │  │
│  │  │ controller.js   │    │                    │   │ • Typing indicators   │ │  │
│  │  │                 │    │ participant.       │   │ • Read receipts       │ │  │
│  │  │ participant.    │    │ model.js           │   │ • User online status  │ │  │
│  │  │ controller.js   │    │                    │   │                       │ │  │
│  │  │                 │    │                    │   │                       │ │  │
│  │  │ attachment.     │    │                    │   │                       │ │  │
│  │  │ controller.js   │    │                    │   │                       │ │  │
│  │  └─────────────────┘    └────────────────────┘   └───────────────────────┘ │  │
│  │                                                                             │  │
│  └─────────────────────────────────────────────────────────────────────────────┘  │
│                                       │                                            │
│                                       ▼                                            │
│  ┌─────────────────────────────────────────────────────────────────────────────┐  │
│  │                             DATABASE SCHEMA                                 │  │
│  │                                                                             │  │
│  │   ┌──────────────────┐    ┌───────────────────┐    ┌───────────────────┐   │  │
│  │   │  CONVERSATION    │    │     MESSAGE       │    │   PARTICIPANT     │   │  │
│  │   │                  │    │                   │    │                   │   │  │
│  │   │ • id             │    │ • id              │    │ • id              │   │  │
│  │   │ • type           │◄───┤ • conversationId  │    │ • conversationId  │◄──┤   │  │
│  │   │ • name           │    │ • senderId        │◄───┤ • userId          │   │  │
│  │   │ • createdBy      │    │ • content         │    │ • role            │   │  │
│  │   │ • lastMessageAt  │    │ • type            │    │ • joinedAt        │   │  │
│  │   │ • metadata       │    │ • status          │    │ • lastReadAt      │   │  │
│  │   │ • isArchived     │    │ • attachments     │    │ • lastTypingAt    │   │  │
│  │   │                  │    │ • readAt          │    │ • isArchived      │   │  │
│  │   └──────────────────┘    └───────────────────┘    └───────────────────┘   │  │
│  │                                                                             │  │
│  └─────────────────────────────────────────────────────────────────────────────┘  │
│                                                                                    │
└────────────────────────────────────────────────────────────────────────────────────┘

┌─────────────────────────── MESSAGING WORKFLOW ─────────────────────────────┐
│                                                                            │
│  1. INITIATE CONVERSATION                                                  │
│     ┌─────────────┐      ┌─────────────────┐      ┌───────────────────┐   │
│     │ Worker/Hirer│─────▶│ MessageContext  │─────▶│messagingService.  │   │
│     │ Profile Page│      │ createConvo()   │      │createConversation()   │
│     └─────────────┘      └─────────────────┘      └────────┬──────────┘   │
│                                                             │              │
│                    ┌───────────────────────────────────────┐│              │
│                    │ Backend: conversation.controller.js   ││              │
│                    │ createConversation()                  │◀──────────────┘
│                    └───────────────────────────────────────┘               │
│                                                                            │
│  2. SEND MESSAGE                                                           │
│     ┌───────────┐      ┌─────────────────┐     ┌──────────────────┐       │
│     │ChatComponent│────▶│ MessageContext  │────▶│messagingService. │       │
│     │sendMessage()│     │ sendMessage()   │     │sendMessage()     │       │
│     └───────────┘      └─────────────────┘     └────────┬─────────┘       │
│                                                          │                 │
│                    ┌──────────────────────────────────┐  │                 │
│                    │Socket Connection: socket.emit()  │◀─┘                 │
│                    └──────────────┬───────────────────┘                    │
│                                   │                                        │
│                    ┌──────────────▼───────────────────┐                    │
│                    │Backend: messageSocket.js         │                    │
│                    │socket.on('send_message')         │                    │
│                    └──────────────┬───────────────────┘                    │
│                                   │                                        │
│                    ┌──────────────▼───────────────────┐                    │
│                    │Backend: Message.create()         │                    │
│                    │Store message in database         │                    │
│                    └──────────────┬───────────────────┘                    │
│                                   │                                        │
│                    ┌──────────────▼───────────────────┐                    │
│                    │Backend: io.to(conversationId)    │                    │
│                    │.emit('new_message')              │                    │
│                    └──────────────┬───────────────────┘                    │
│                                   │                                        │
│                    ┌──────────────▼───────────────────┐                    │
│                    │Frontend: socket.on('new_message')│                    │
│                    │Update UI with new message        │                    │
│                    └──────────────────────────────────┘                    │
│                                                                            │
│  3. REAL-TIME FEATURES                                                     │
│     ┌────────────────┐     ┌─────────────────┐     ┌──────────────────┐   │
│     │ User actions:  │     │Socket Connection:│     │ Other users:     │   │
│     │ - Type message │────▶│ - typing_status │────▶│ - Show typing    │   │
│     │ - Read message │     │ - mark_read     │     │   indicator      │   │
│     │ - Go online    │     │ - user_status   │     │ - Show read      │   │
│     └────────────────┘     └─────────────────┘     │   receipt        │   │
│                                                    │ - Update status   │   │
│                                                    └──────────────────┘   │
└────────────────────────────────────────────────────────────────────────────┘


Key Files and Their Roles
Frontend Components
Main UI Components
/kelmah-frontend/src/pages/MessagingPage.jsx: Main messaging interface with layout management
/kelmah-frontend/src/components/messaging/ConversationList.jsx: Displays list of conversations
/kelmah-frontend/src/components/messaging/ChatComponent.jsx: Chat interface with message display/input
/kelmah-frontend/src/components/messaging/MessageItem.jsx: Individual message display component
State Management
/kelmah-frontend/src/contexts/MessageContext.jsx: Context provider for messaging
/kelmah-frontend/src/contexts/AuthContext.jsx: Authentication context used for user info
Service Layer
/kelmah-frontend/src/services/messagingService.js: Core messaging service with Socket.IO and API
/kelmah-frontend/src/api/messageService.js: Direct API calls for messaging
/kelmah-frontend/src/services/chatService.js: Alternative basic chat functionality
Entry Points
/kelmah-frontend/src/components/workers/WorkerCard.jsx: Contact worker button
/kelmah-frontend/src/pages/profiles/WorkerProfilePage.jsx: Profile contact option
/kelmah-frontend/src/pages/jobs/JobDetailsPage.jsx: Message hirer from job details
Backend Services
Messaging Service Controllers
/kelmah-backend/services/messaging-service/controllers/conversation.controller.js: Manages conversations
/kelmah-backend/services/messaging-service/controllers/message.controller.js: Handles messages
/kelmah-backend/services/messaging-service/controllers/participant.controller.js: Manages conversation participants
/kelmah-backend/services/messaging-service/controllers/attachment.controller.js: File uploads/attachment handling
Database Models
/kelmah-backend/services/messaging-service/models/conversation.model.js: Conversation data structure
/kelmah-backend/services/messaging-service/models/message.model.js: Message data structure
/kelmah-backend/services/messaging-service/models/participant.model.js: Conversation participant data
Socket Handlers
/kelmah-backend/services/user-service/socket/messageSocket.js: Socket.IO event handlers
/kelmah-backend/services/messaging-service/socket.js: Socket configuration
API Routes
/kelmah-backend/services/messaging-service/routes/messaging.routes.js: Main message API routes
/kelmah-backend/services/user-service/routes/message.routes.js: Alternative message routes
Key Features and Workflows
Conversation Management
Create direct (one-to-one) and group conversations
List conversations with latest messages
Archive/unarchive conversations
Real-time conversation updates
Messaging Capabilities
Text messages with rich text support
File attachments (images, documents)
Message status tracking (sent, delivered, read)
Message editing and deletion
Real-time Features
Typing indicators
Read receipts
Online status indicators
Instant message delivery
Worker-Hirer Communication Context
Job-specific conversations
Contract discussions
Payment coordination
Project updates
Integration with Worker-Hirer Workflow
Message button on job listings
Contact option from worker/hirer profiles
Notifications for new messages
Unread message indicators
The messaging system uses Socket.IO for real-time communication and connects to a dedicated messaging service in the backend. The database structure follows a typical chat application pattern with conversations, messages, and participants tables. The frontend components are organized to provide a responsive and intuitive messaging experience for both workers and hirers.
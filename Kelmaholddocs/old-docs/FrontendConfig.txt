# KELMAH FRONTEND CONFIGURATION GUIDE
# Connecting to Self-Hosted Backend on Windows PC

## üéØ OVERVIEW
This document summarizes all changes made to wire your React frontend (deployed on Vercel) to connect to your Kelmah backend running via ngrok tunnel at https://deddd7500a13.ngrok-free.app

## üîß BACKEND STATUS
‚úÖ **All 7 microservices are running successfully:**
- API Gateway: Port 3000
- Auth Service: Port 5001  
- User Service: Port 5002
- Job Service: Port 5003
- Payment Service: Port 5004
- Messaging Service: Port 5005
- Review Service: Port 5006

‚úÖ **MongoDB Atlas connection working**
‚úÖ **External access enabled (0.0.0.0 binding)**

## üìù FRONTEND CONFIGURATION CHANGES MADE

### 1. Vercel Rewrites (kelmah-frontend/vercel.json)
```json
{
  "rewrites": [
    {
      "source": "/api/(.*)",
             "destination": "https://deddd7500a13.ngrok-free.app/api/$1"
    },
    {
      "source": "/socket.io/(.*)", 
             "destination": "https://deddd7500a13.ngrok-free.app/socket.io/$1"
    }
  ]
}
```
**Purpose:** Routes all API calls and WebSocket connections from Vercel to your Windows PC

### 2. Security Configuration (kelmah-frontend/src/config/securityConfig.js)
```javascript
'connect-src': [
  "'self'",
     'https://deddd7500a13.ngrok-free.app',  // Added your backend
  // Legacy Render URLs kept for reference
]
```
**Purpose:** Allows frontend to connect to your backend IP

### 3. Dashboard Service (kelmah-frontend/src/modules/dashboard/services/dashboardService.js)
```javascript
// Changed from direct axios to shared client
import apiClient from '../../common/services/axios';

// Socket configuration updated
this.socket = io(API_BASE_URL.replace(/\/?api$/, ''), {
  auth: { token: this.token },
  path: '/socket.io',  // Changed from '/ws' to '/socket.io'
  transports: ['websocket'],
  // ... other options
});

// All API calls now use relative paths
const response = await apiClient.get('/api/dashboard/overview');
```
**Purpose:** 
- Uses centralized axios client for consistent API routing
- WebSocket connects via gateway with correct socket.io path
- All requests go through Vercel proxy to your backend

### 4. Backend Environment Variables (kelmah-backend/start-production.js)
```javascript
env: { 
  // ... other vars
  FRONTEND_URL: process.env.FRONTEND_URL || process.env.VERCEL_URL || ''
}
```
**Purpose:** Passes frontend URL to all services for CORS configuration

## üöÄ DEPLOYMENT STEPS

### Step 1: Backend CORS Configuration
Add to `kelmah-backend/.env`:
```bash
FRONTEND_URL=https://YOUR-VERCEL-DOMAIN.vercel.app
```

### Step 1.5: ngrok Browser Warning Fix
The frontend now automatically sends the `ngrok-skip-browser-warning: true` header with all requests to bypass the ngrok warning page. This is configured in:
- `kelmah-frontend/src/modules/common/services/axios.js` - For HTTP requests
- `kelmah-frontend/src/modules/dashboard/services/dashboardService.js` - For WebSocket connections
- `kelmah-frontend/src/services/websocketService.js` - For messaging WebSocket
- `kelmah-frontend/src/modules/notifications/services/notificationService.js` - For notification WebSocket

### Step 2: Restart Backend
```bash
# Stop current services (Ctrl+C)
# Then restart
node start-production.js
```

### Step 3: Deploy Frontend to Vercel
```bash
git add .
git commit -m "Configure frontend for self-hosted backend"
git push origin main
```

## üîç HOW IT WORKS

### Development Mode (localhost:5173)
- Vite proxy routes `/api/*` to `http://localhost:5000`
- WebSocket connects directly to messaging service

### Production Mode (Vercel)
- Vercel rewrites `/api/*` to `https://deddd7500a13.ngrok-free.app/api/*`
- Vercel rewrites `/socket.io/*` to `https://deddd7500a13.ngrok-free.app/socket.io/*`
- All traffic goes through your API Gateway on Windows PC

### API Flow
```
Frontend (Vercel) ‚Üí /api/auth/login ‚Üí Vercel Rewrite ‚Üí Windows PC:3000 ‚Üí Auth Service:5001
```

### WebSocket Flow  
```
Frontend (Vercel) ‚Üí /socket.io ‚Üí Vercel Rewrite ‚Üí Windows PC:3000 ‚Üí Messaging Service:5005
```

## ‚úÖ VERIFICATION CHECKLIST

After deployment, verify on your Vercel site:

1. **API Health Check**
   - Visit: `https://YOUR-VERCEL-DOMAIN.vercel.app/api/health`
   - Should return health status from your backend

2. **Authentication**
   - Try to log in/register
   - Check browser console for successful API calls

3. **WebSocket Connection**
   - Log in and check if messaging works
   - Browser console should show socket connection

4. **No CORS Errors**
   - All API calls should work without CORS issues
   - WebSocket connections should establish successfully

## ‚ö†Ô∏è IMPORTANT NOTES

### IP Address Changes
If your public IP address changes:
1. Update `kelmah-frontend/vercel.json` with new IP
2. Update `kelmah-frontend/src/config/securityConfig.js` with new IP
3. Redeploy frontend on Vercel

### Environment Variables
**DO NOT SET** these on Vercel:
- `VITE_API_URL` - Leave unset (defaults to `/api`)
- `VITE_MESSAGING_SERVICE_URL` - Leave unset (uses origin)

**SET** these on Vercel (optional):
- `VITE_DEBUG_MODE=true` - For debugging
- `VITE_ENABLE_ANALYTICS=true` - For analytics

### Firewall Requirements
Ensure Windows Firewall allows inbound connections on:
- Port 3000 (API Gateway)
- Ports 5001-5006 (Microservices)

## üêõ TROUBLESHOOTING

### Common Issues

1. **CORS Errors**
   - Check if `FRONTEND_URL` is set correctly in backend `.env`
   - Restart backend after changing environment variables

2. **WebSocket Connection Failed**
   - Verify messaging service is running on port 5005
   - Check if socket.io proxy is working in API Gateway

3. **API Calls Failing**
   - Check if API Gateway is running on port 3000
   - Verify Vercel rewrites are configured correctly

4. **Connection Timeout**
   - Check if your public IP is still correct
   - Verify Windows Firewall settings

### Debug Commands
```bash
# Check backend services
netstat -an | findstr ":300"
netstat -an | findstr ":500"

# Check backend logs
# Look for successful connections and health checks
```

## üìö TECHNICAL DETAILS

### Frontend Architecture
- **Base URL**: `/api` (relative to Vercel domain)
- **WebSocket Path**: `/socket.io` (standard Socket.IO path)
- **API Client**: Centralized axios instance with interceptors
- **Error Handling**: Retry logic with exponential backoff

### Backend Architecture  
- **API Gateway**: Port 3000, handles routing and CORS
- **Service Discovery**: Health monitoring with circuit breakers
- **WebSocket Proxy**: Routes `/socket.io` to messaging service
- **Load Balancing**: Round-robin between healthy services

### Security Features
- **CORS**: Configured per service with frontend URL
- **Authentication**: JWT tokens with refresh mechanism
- **Rate Limiting**: Per-service rate limiting
- **Input Validation**: Request validation middleware

## üéâ SUCCESS INDICATORS

When everything is working correctly:
- ‚úÖ Frontend loads without errors on Vercel
- ‚úÖ Login/registration works
- ‚úÖ API calls return data from your backend
- ‚úÖ Real-time messaging works via WebSocket
- ‚úÖ No CORS errors in browser console
- ‚úÖ All services show as healthy in API Gateway

## üîÑ MAINTENANCE

### Regular Checks
1. Monitor backend service health
2. Check Windows Firewall settings
3. Verify public IP hasn't changed
4. Monitor MongoDB Atlas connection

### Updates
1. Keep backend services updated
2. Monitor for security patches
3. Update frontend dependencies as needed

---

**Last Updated:** $(date)
**Backend IP:** 154.161.158.29
**Status:** ‚úÖ Configured and Ready for Deployment



 
const backend = require('./config.json').domain;

@  https://deddd7500a13.ngrok-free.app 
### Kelmah Master Plan v6 (Frontend-Focused, Worker & Hirer Sectors)

Vision: Deliver a production-ready, beautifully animated, black–gold–white themed platform that connects vocational workers with hirers, with robust auth, real-time messaging, complete worker/hirer flows, and clean service wiring to backend microservices.

---

### A. Critical Issues Found (must fix first)

1) Syntax/build blocker
- `kelmah-frontend/src/modules/worker/pages/JobSearchPage.jsx`: stray `[];` breaks compilation within styled component definition. Remove it.

2) Messaging API mismatches (legacy vs new)
- `src/modules/messaging/services/messageService.js` uses paths like `/messages/conversations` under the shared axios instance. Backend exposes messaging under `/api/conversations` and `/api/messages` (messaging-service). Consolidate calls to `messagingServiceClient` via `src/modules/messaging/services/messagingService.js` and remove legacy service usage from UI.
- Missing backend endpoint used in FE: `GET /api/messages/stats` (not present). Replace with existing `/api/messages/unread/count` or implement stats on backend.

3) Worker services misrouted to wrong backend
- `src/modules/worker/services/workerService.js` routes several job-related endpoints (save/apply/withdraw/application-status) through `userServiceClient` instead of `jobServiceClient`. Repoint these to job-service.

4) Hirer services miswired
- `src/modules/hirer/services/hirerService.js#updateProfile` hits `/api/profile` (placeholder). Use `/api/users/me/profile` in user-service.
- `src/modules/hirer/services/hirerSlice.js#fetchPaymentSummary` calls `/api/payments/summary` on `userServiceClient`. Should call payment-service (new `paymentServiceClient`).

5) Dual/unified config drift
- Two config systems exist: `src/config/environment.js` (import.meta.env) and `src/config/constants.js` (process.env). Standardize on `environment.js` for runtime app; constrain `constants.js` to test-only. Ensure all axios instances originate from `modules/common/services/axios.js`.

6) Route/page duplication/inconsistency
- `App.jsx` and `routes/workerRoutes.jsx` import Job Search from `JobApplicationPage` while a full `JobSearchPage.jsx` exists. Remove duplication; standardize route `/worker/find-work` to the richer `JobSearchPage.jsx`.

7) Over-permissive production service default
- `environment.js` falls back to production service URLs when no env vars are provided. For local development, prefer proxy (`/api`) or explicit local service URLs; never silently hit prod.

8) Messaging deep-link
- `MessagingPage.jsx` still uses legacy `messageService.createConversation`. Switch to `messagingService.createDirectConversation` from `messagingService.js` to match backend.

---

### B. Underdeveloped/Missing Areas

- Worker
  - Saved jobs/my applications wiring to job-service (see A.3).
  - Availability UI to support recurring schedules and paused-until date.
  - Portfolio/certificates: FE has strong UI; verify create/edit/delete flows to `/api/profile/*` and presign upload path.

- Hirer
  - Payments summary, escrow management views should be wired to payment-service (currently stubbed/misrouted).
  - Hiring flow: proposal comparison, background checks exist as components; ensure data sources from user-service/job-service are available and hooked.

- Messaging
  - Typing indicators, read receipts supported via socket; ensure REST fallbacks are consistent.
  - Add message stats API or adjust FE to use unread count.

- Notifications
  - In-app counters present; verify backend `/api/notifications` (messaging-service) integrated in navbar.

- Auth
  - Social login placeholders; MFA pages exist; backend endpoints for MFA are placeholders—plan implementation or hide feature flag.

---

### C. Page & Route Coverage (Frontend)

- Public: Home, Jobs list/details, Map, Search, Worker public search.
- Worker: Dashboard, Skills, Applications, Schedule, Reviews, Edit Profile, Portfolio manager, Certificates, Earnings, Availability, Find Work, Contracts, Payments, Wallet.
- Hirer: Dashboard, Applications, Job Posting, Job Management, Find Talent, Tools, Analytics.
- Messaging: Full page with context + real-time socket.
- Admin: Dashboard, Users, Skills Mgmt, Categories, Payments, Payouts, Disputes, Settings.

Gaps to finalize: unify worker job search page; wire saved/applied jobs; payment/escrow UI to payment-service; messaging stats or FE fallback.

---

### D. API Alignment (what FE should call)

- Auth service
  - `/api/auth/*` (login, register, refresh, verify, logout, password flows). OK.

- User service
  - `/api/users/*` (me/credentials, workers search, worker profile/availability/skills/completeness, portfolio & certificates via `/api/profile/*`). Ensure profile updates use `/api/users/me/profile`.

- Job service
  - `/api/jobs` (list/search/details)
  - `/api/jobs` POST (hirer create) + `/api/jobs/my-jobs` (hirer list)
  - `/api/jobs/:id/applications` (hirer)
  - Worker interactions (apply/save/withdraw/status) should be here.

- Messaging service
  - `/api/conversations`, `/api/messages`, `/api/messages/conversation/:conversationId`, `/api/messages/unread/count`

- Payment service
  - `/api/payments/*` (methods, wallet, transactions, escrows). Route FE payment summary and escrow UI here.

---

### E. The Advanced Execution Plan (Phased)

P0 Blockers (today)
- Remove `[];` from JobSearchPage; run FE build.
- Replace all usage of legacy `messageService.js` with `messagingService.js` and correct paths.
- Repoint workerService job endpoints to job-service; fix hirer profile update and payment summary client.
- Standardize config: export a single `getClient(service)` from `modules/common/services/axios.js`; eliminate duplicate axios creation scattered in slices/services.

P1 Worker Sector Completion
- Job Search: unify route to `JobSearchPage.jsx`; remove `JobApplicationPage.jsx` or demote to sub-feature if needed.
- Saved Jobs/My Applications: implement through job-service; add list pages and integrate with dashboard widgets.
- Availability: extend UI to support recurring windows and paused-until; persist to `/api/users/workers/:id/availability`.
- Portfolio & Certificates: ensure presign upload flow with user-service `/api/profile/uploads/presign`; add upload progress and retry.

P2 Hirer Sector Completion
- Job Posting: finalize wizard validations; attach requirements builder and budget estimator components.
- Job Management: status transitions wired to `/api/jobs/:id/status`.
- Worker Search: connect bookmark/save workers; background check request to `user-service` verification stub.
- Payments: payment summary and escrow list wired to payment-service; add release milestone flow (UI → payment-service).

P3 Messaging & Notifications
- Remove FE call to `/messages/stats`; add unread count usage and a small stats bar fed by conversations aggregation.
- WebSocket reconnect/backoff tuning; ensure REST fallback always available.
- Add attachments flow to S3 via presign from user-service if needed for message attachments (or retain direct upload if messaging-service supports it).

P4 Reviews & Reputation
- Ensure worker reviews pages use review-service endpoints consistently; wire helpful/report actions; moderation in admin.

P5 Security & Auth
- Gate experimental MFA/social login behind feature flags; hide UI if backend disabled.
- Ensure axios refresh flow unified (only one refresh path) and secure storage used across all clients.

P6 UX/Theme/Performance
- Audit animations for mobile; throttle expensive effects; virtualize long lists (conversations/jobs).
- Lighthouse pass; code-split routes, prefetch critical bundles.

P7 QA & Observability
- Add end-to-end tests for worker and hirer critical flows.
- Frontend error boundary telemetry (Sentry) behind env flag; align service health checks.

---

### F. Concrete Task Checklist (by file)

- Messaging
  - [ ] Remove imports of `../services/messageService` from UI; use `messagingService` only.
  - [ ] Replace calls to `/messages/*` with `/api/conversations` and `/api/messages` via `messagingServiceClient`.
  - [ ] Implement or remove `getStats` usage; add `/api/messages/unread/count` consumption.

- Worker
  - [ ] In `workerService.js`, switch job endpoints to `jobServiceClient` (`saveJob`, `unsaveJob`, `applyToJob`, `withdrawApplication`, `getApplicationStatus`).
  - [ ] Unify Job Search route to `JobSearchPage.jsx`; delete or repurpose `JobApplicationPage.jsx`.
  - [ ] Fix JobSearchPage syntax error; run build.

- Hirer
  - [ ] `hirerService.updateProfile` → `/api/users/me/profile`.
  - [ ] `hirerSlice.fetchPaymentSummary` → use `paymentServiceClient` `/api/payments/summary` (or existing wallet/transactions endpoints) and drive Payments UI.

- Config/Clients
  - [ ] Remove stray axios.create() duplicates in slices; import clients from `modules/common/services/axios.js`.
  - [ ] Adjust `environment.js` so dev uses `/api` gateway by default; require explicit prod service URLs via VITE env.

---

### G. Acceptance Criteria per Sector

- Worker: can search, save, apply, view applications; manage availability/portfolio/certificates; see earnings and reviews.
- Hirer: can post and manage jobs, view applications, shortlist workers, manage payments/escrows.
- Messaging: stable real-time chat with read receipts/typing and graceful REST fallback; unread counts accurate.
- Auth/Security: token refresh unified; sensitive data encrypted client-side; feature flags respected.

---

### H. Test Plan (high level)

- Unit: services (worker/hirer/messaging/jobs/payments) mock adapters; reducers/selectors.
- Integration: route guards, job posting → application → messaging → payment release happy path.
- E2E (Cypress): worker and hirer journeys on staging with seed data.

---

### I. Risks & Mitigations

- Service drift across environments → enforce gateway in dev, env-driven URLs in prod only.
- Messaging socket instability → robust backoff + REST fallback always available.
- Uploads → prefer presigned S3; size/type limits enforced both FE and BE.

---

### J. Timeline (aggressive)

- Week 1: P0 fixes, Worker+Hirer wiring corrections, build green, core flows tested.
- Week 2: Messaging cleanup, payments/escrow wiring, reviews polish.
- Week 3: UX/perf passes, mobile polish, QA/E2E, deploy.

---

This Master6plan prioritizes wiring correctness and production readiness for Worker and Hirer sectors while stabilizing messaging and payments integration. Follow the file-by-file checklist and phase plan to reach a shippable state.




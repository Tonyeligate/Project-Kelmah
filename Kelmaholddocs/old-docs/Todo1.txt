KELMAH GOD MODE: ADVANCED MASTER PLAN (Execution-Ready)

Purpose: Complete and harden the Kelmah platform to production quality for Ghana market – secure auth, robust worker/hirer flows, real-time messaging, and Ghanaian payments & escrow. This plan prioritizes security, correctness, and maintainability.

Critical Findings (high-priority fixes first)
- Auth security: Default JWT secret fallback present in multiple places. Example: `kelmah-backend/services/auth-service/middlewares/auth.js` uses a hardcoded fallback secret. Must enforce required env vars and remove fallbacks.
- API Gateway directories duplicated (`middleware` vs `middlewares`). Consolidate to one and fix imports.
- CORS leakage: In `api-gateway/proxy/serviceProxy.js`, `onProxyRes` sets `Access-Control-Allow-Origin: *`. Replace with origin-aware CORS, rely on gateway CORS.
- WebSocket proxy: Gateway does not explicitly enable ws proxying for messaging. Enable `ws: true` and add upgrade handling.
- Frontend Worker search bug: `kelmah-frontend/src/modules/hirer/components/WorkerSearch.jsx` references `filteredWorkers` without declaration when API fails. Define fallback list and variable before filtering.
- Frontend ProtectedRoute bug: Duplicate `useAuth` import and `isAllowed` marked required despite optional usage.
- Payments: Ghana endpoints exist backend; ensure frontend calls match (MTN/Vodafone/AirtelTigo/Paystack) and webhook verification is strict. Verify AirtelTigo line usage in `paymentService.js` (current file appears correct; re-check before release).
- Mixed DB: Root monolith mixes Sequelize (Postgres) and Mongoose (MongoDB). Microservices use Mongo. Choose and standardize per service and remove dead/misleading migrations in unrelated services.
- File uploads: Messaging and user-service save to local `/uploads`. For production, move to S3/presigned URLs and validate file types/size server-side.

Phase 0 – Emergency Hardening (Day 1–3)
1) Enforce JWT security, remove fallbacks, standardize tokens
   - Files:
     - kelmah-backend/services/auth-service/middlewares/auth.js
       - Remove `|| 'kelmah_jwt_secret_key_2024_secure'` fallback; if missing, throw 500 and log.
     - kelmah-backend/api-gateway/middleware/auth.js (and any `middlewares/` duplicate)
       - Ensure `const JWT_SECRET = process.env.JWT_SECRET` is required; fail fast if missing at startup.
     - kelmah-backend/src/middlewares/auth.js
       - Same enforcement; ensure refresh token usage references `JWT_REFRESH_SECRET` only, no fallback.
     - kelmah-backend/services/auth-service/utils/jwt(.js|secure.js)
       - Confirm both access/refresh use env secrets; add issuer/audience claims from `config/env`.
   - Add central boot-time validator (shared):
     - kelmah-backend/shared/utils/validateEnv.js → assert all critical envs per service.
   - Rotate secrets in Render and Vercel; ensure all services use the same `JWT_SECRET`.

2) Fix API Gateway consistency and CORS
   - Files:
     - kelmah-backend/api-gateway/server.js
       - Add ws proxy support for messaging: `{ ws: true }` on messages and webhooks where applicable.
       - Add `server.on('upgrade', ...)` if needed by http-proxy-middleware for WS pass-through.
     - kelmah-backend/api-gateway/proxy/serviceProxy.js
       - Remove `proxyRes.headers['Access-Control-Allow-Origin'] = '*'`.
     - Remove duplicate folder: choose `middleware/` and delete `middlewares/` (or vice versa); fix all imports.

3) Frontend critical bug fixes
   - Files:
     - kelmah-frontend/src/modules/auth/components/common/ProtectedRoute.jsx
       - Remove duplicate `useAuth` import; make `isAllowed` optional in PropTypes.
     - kelmah-frontend/src/modules/hirer/components/WorkerSearch.jsx
       - Define `let filteredWorkers = [];` and supply a mock or skip fallback filtering; guard filters when `workers.length === 0`.
     - Verify in `paymentService.js` that AirtelTigo call uses `paymentServiceClient.post('/api/payments/airteltigo/request-to-pay', ...)`.

4) Tighten file upload security
   - Files:
     - messaging-service/routes/attachments.routes.js and user-service/controllers/upload.controller.js
       - Validate MIME, size, and count. Virus scan hook (ClamAV or provider) for production.
       - Return only signed URLs; do not serve from local `/uploads` in production.
   - Add presign endpoints (Phase 2) and move to S3; feature flag for local dev.

5) Deployment misconfiguration fixes
   - Follow `RENDER-DEPLOYMENT-FIX-INSTRUCTIONS.md` to correct Job Service root directory. Verify each service `/health` returns expected service name.

Phase 1 – Authentication & Session (Week 1)
- Implement refresh token rotation and device context
  - auth-service
    - Issue short-lived access (15m) + rotating refresh (7d) with `jti`, `aud`, `iss`, `ip`, `ua` claims.
    - Store refresh tokens (hashed) with device metadata (ip, ua) and token version.
    - Add `/api/auth/refresh` that rotates tokens, invalidates previous refresh (db update by jti or version bump).
    - Add logout-all-sessions and revoke-specific-session endpoints.
  - API Gateway
    - Respect `Authorization` bearer; optionally support httpOnly cookie for access token (future).
  - Frontend
    - Standardize on AuthContext; remove Redux duplication for auth state. Move token refresh into a single service with silent refresh and retry queue.

Acceptance
- No hardcoded JWT fallback secrets in code.
- Refresh flow returns new access/refresh; old refresh invalidated.
- ProtectedRoute & WorkerSearch lint clean and error-free.

Phase 2 – Worker Sector Completion (Week 2–3)
Scope aligns with Kelma.txt and worker focus.
Backend (user-service)
- Endpoints:
  - GET /api/workers/search (filters: skills, location, rating, rate, verified)
  - POST /api/workers/:id/bookmark (toggle)
  - GET /api/workers/:id/portfolio
  - POST /api/workers/:id/portfolio (S3 presigned upload, metadata store)
  - POST /api/workers/:id/certificates (upload + verification status)
  - GET /api/workers/:id/earnings (summary + time-series)
- Add indexes for search fields. Rate-limit and cache (Redis optional) hot queries.

Frontend
- Components/pages to verify or add:
  - modules/worker/components/PortfolioManager.jsx (CRUD wired to backend)
  - modules/worker/components/CertificateUploader.jsx (progress + statuses)
  - modules/worker/components/EarningsAnalytics.jsx (charts for income)
  - modules/worker/components/AvailabilityCalendar.jsx (persisted availability)
  - Fix WorkerSearch “Save Worker” to call bookmark API and reflect state.
- Add skeleton loaders and optimistic updates; offline cache via service worker for portfolio preview.

Acceptance
- Worker search filters return consistent results from API.
- Portfolio and certificates persist; verification statuses visible.
- Earnings analytics loads with mock when API down; real when up.

Phase 3 – Messaging Real-Time & Attachments (Week 3–4)
Backend (messaging-service)
- WebSocket: Confirm JWT auth on connect; add WS proxy through gateway; add presence/typing rooms.
- Attachments: Switch to S3 presigned uploads. Server validates metadata only; client uploads directly.
- Read receipts and unread counts; bulk mark-as-read endpoint.

Frontend
- Contexts/hooks: Ensure reconnect/backoff & background tab handling.
- File picker: multi-file, type/size guard, preview thumbnails; show upload progress via socket `file_upload_progress`.
- Message actions: delete for sender, copy, report abuse.

Acceptance
- WS connects through gateway reliably; messages deliver in <2s P95.
- Attachments upload >2MB reliable with progress; files accessible via signed URLs.

Phase 4 – Ghana Payments & Escrow (Week 4–5)
Backend (payment-service)
- Ghana MoMo endpoints (existing): harden validation, normalize currency GHS.
- Paystack: strict webhook signature verification; map statuses to internal Transaction/Payment; idempotency keys.
- Escrow: endpoints for create/fund/release/refund; integrate notifications.
- Webhooks: stripe/paystack/gh endpoints under `/api/webhooks/*`, verify HMACs.

Frontend
- paymentService.js wired (already maps to endpoints). Add unified “Mobile Money” flow + status polling and UX for pending states.
- Escrow manager: Create/fund per milestone; partial release; show fees and timelines.

Acceptance
- MTN/Vodafone/AirtelTigo flows succeed end-to-end in sandbox.
- Paystack initialization and verification stable; receipts stored.
- Escrow lifecycle functional (fund→release/refund) and auditable.

Phase 5 – API Gateway, Observability, and Rate Limiting (Week 5–6)
- API Gateway
  - WS proxy with `ws: true`; unify middleware dir; health checks for all services.
  - Request/response logging with correlation IDs; redact secrets.
  - Global and route-specific rate limits; login-specific tighter limits.
- Telemetry
  - Winston + JSON logs. Optional OpenTelemetry traces (phase 7).
- Error handling
  - Consistent error payloads; hide stacktraces in prod; surfaced codes for UX.

Acceptance
- All routes proxied through gateway; no direct service calls from FE.
- Logs include requestId and userId; 0 leaked secrets.

Phase 6 – Database Consistency & Data Model Audit (Week 6–7)
- Decide per-service storage:
  - Keep MongoDB for: auth sessions/refresh, messaging, users/workers, jobs (current Mongoose models already exist in services).
  - Payment: Mongo OK (current code uses Mongo). If needed, move ledger to Postgres later.
- Remove obsolete Sequelize migrations from microservices; retain only where used.
- Add data retention and archival policies.

Acceptance
- No unused migrations referenced in services; connections succeed on startup.
- Indexes created for search-heavy fields; cold-start performance acceptable.

Phase 7 – Reviews/Notifications/Admin (Week 7–8)
- Review-service: finalize moderation queue, rate-limited submissions, analytics endpoints.
- Notifications: integrate in-app notifications from payments/messaging; SSE/WS channel.
- Admin: user moderation, dispute overview, payout audit.

Acceptance
- Moderation tools functional; abusive content workflow defined.
- Notification center shows real events; ack/mark-read works.

Security & Compliance Checklist (continuous)
- JWT: short-lived access 15m; refresh rotation; issuer/audience claims set; clock skew tolerances.
- CORS: strict origin list via env; no wildcard in proxies.
- File uploads: MIME sniffing; AV scanning in production; signed URLs only; expiry ≤ 15 min.
- Rate limits: auth-heavy routes ≤ 5/min; generic ≤ 1000/15m; per-IP and per-account.
- Secrets: only from env; never in repo. Rotate on leakage.
- Logging: no PII in logs; redact tokens; security events to `security.log`.

Deliverables by File (concrete edits)
- Auth
  - services/auth-service/middlewares/auth.js: remove fallback secret; 401/403 messages stable; user lookup consistent (Mongo model method names confirmed).
  - services/auth-service/utils/jwt.js: include `iss`, `aud`, `jti`; validate on verify.
  - src/middlewares/auth.js: enforce env, add `authenticateRefreshToken` correctness.
- API Gateway
  - api-gateway/server.js: add `{ ws: true }` to messaging proxy; add upgrade handler; refine CORS.
  - api-gateway/proxy/serviceProxy.js: remove wildcard CORS header.
  - api-gateway/middleware/*: consolidate folder; update imports.
- Worker Frontend
  - modules/hirer/components/WorkerSearch.jsx: fix `filteredWorkers`; hook up bookmark API; error boundaries.
  - modules/auth/components/common/ProtectedRoute.jsx: remove duplicate import; PropTypes update.
- Payments
  - services/payment-service/routes/payments.routes.js: validate request schema (amount, currency, phone formats); add idempotency keys; ensure all Ghana endpoints auth-protected.
  - services/payment-service/integrations/*: strict env validation; throw if missing keys.
  - Frontend paymentService.js: verify AirtelTigo, Paystack calls; add retry/backoff and user feedback for pending states.
- Messaging
  - services/messaging-service/server.js: ensure allowed origins sourced from env; logs silent in prod; hard error if Mongo URI missing in prod.
  - services/messaging-service/socket/messageSocket.js: verify JWT and role; join rooms by conversation; emit progress events.
- Uploads
  - user-service/controllers/upload.controller.js & messaging-service/routes/attachments.routes.js: guardrails; future: swap to S3.

Testing Plan
- Unit
  - Auth token utilities; payment controllers; worker search service.
- Integration
  - Auth register/login/refresh; message send/read; escrow fund/release.
- End-to-end
  - Login → search worker → message → create contract → fund escrow → release → review.
- CI matrix
  - Run test-setup/jest.config.js projects (frontend/backend). Generate coverage & JUnit to `test-reports/`.

Environment Variables (Render/Vercel)
- Core
  - NODE_ENV=production
  - JWT_SECRET=64+ random
  - JWT_REFRESH_SECRET=64+ different random
  - INTERNAL_API_KEY=random internal key
  - FRONTEND_URL=https://project-kelmah.vercel.app
  - ALLOWED_ORIGINS=https://project-kelmah.vercel.app,https://*.vercel.app
- Services
  - AUTH_SERVICE_URL, USER_SERVICE_URL, JOB_SERVICE_URL, PAYMENT_SERVICE_URL, MESSAGING_SERVICE_URL, REVIEW_SERVICE_URL
  - MONGODB_URI (per service or shared cluster with separate DBs)
  - Paystack/Stripe/Providers: PAYSTACK_SECRET_KEY, PAYSTACK_PUBLIC_KEY, PAYSTACK_WEBHOOK_SECRET, STRIPE_SECRET_KEY, STRIPE_WEBHOOK_SECRET
- Messaging
  - MESSAGING_SERVICE_PORT, ALLOWED_ORIGINS

Operational Runbook
- Local: `node kelmah-backend/start-services.js` (ensure ports free and env present). FE: `npm run dev` in `kelmah-frontend`.
- Health: hit gateway `/health` and `/api/docs`.
- Observability: tail logs in each service; trace correlation via requestId.

Acceptance Criteria (Go/No-Go)
- Security: No fallback secrets, strict CORS, rate limits applied; uploads validated.
- Stability: All core flows pass; WS stable reconnect; payments succeed in sandbox.
- UX: Worker search responsive and accurate; messaging smooth; escrow intuitive.
- Deployability: Render services point to correct roots; all /health endpoints green; frontend uses gateway only.

Timeline (indicative)
- Week 1: Phase 0 + Phase 1
- Week 2–3: Phase 2 (Worker) + Phase 3 (Messaging)
- Week 4–5: Phase 4 (Payments/Escrow)
- Week 5–6: Phase 5 (Gateway/Obs) + Phase 6 (DB tidy)
- Week 7–8: Phase 7 (Reviews/Notifications/Admin)

Post-Launch Enhancements (backlog)
- End-to-end message encryption; voice notes and calls integration.
- AI job recommendations; dynamic pricing guidance.
- Multi-tenant admin & analytics dashboards.

Notes & Cross-Checks
- Verify `kelmah-backend/RENDER-DEPLOYMENT-GUIDE.md` variables set for gateway.
- Re-check `kelmah-backend/services/payment-service/routes/payments.routes.js` aligns with FE endpoints.
- Remove obsolete migrations in services that use Mongo only.



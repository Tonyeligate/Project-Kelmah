Base on the purpose of the project@Kelma.txt , Do a deep scan and a deep investigation into the project codebase and list out all the cole parts of the project that has not being finished or developed, and write me solid prompts to completely finish developing them. 
Both frontend and backend.

Note the connection and don't temper or change something that will distroy something.
Note  that, always Ask for the for the current file to know it content before make a fix, changes, updates or delete. Let me know if you need something that can help you understand and solve this problem.
Check and read these files and fix the problem.
Please make sure you know the content and importance of a file before makeing changes to it.

Also know that some of the things here have already been done or applied.

Complete the Kelmah authentication system with the following:
1. Implement secure user registration with email verification
2. Develop JWT-based authentication with proper token refresh mechanism
3. Create password reset functionality
4. Build role-based authorization (worker vs hirer)
5. Implement OAuth integration for social login options
6. Add multi-factor authentication for enhanced security
7. Create proper authentication middleware for all protected routes
8. Develop frontend login, registration, and profile screens

Transform the Kelmah mock data implementation into a production-ready database system:
1. Develop complete PostgreSQL/TimescaleDB data models for all entities (profiles, jobs, skills, etc.)
2. Create database migration scripts
3. Implement proper data validation and sanitization
4. Convert all mock data endpoint handlers to use real database operations
5. Implement efficient query optimization for search functionality
6. Add proper error handling for database operations
7. Create data seeding scripts for development and testing
8. Implement database connection pooling and performance optimization

Design and implement a complete payment system for Kelmah:
1. Integrate with Ghana local payment methods for payment processing
2. Create payment models for tracking transactions
3. Implement secure payment flow for job deposits and releases
4. Build escrow functionality for job payments
5. Develop admin payment dashboard for oversight
6. Implement worker payout system with various withdrawal methods
7. Create invoicing and receipt generation
8. Build frontend payment UI components
9. Implement payment dispute resolution system
10. Add payment analytics and reporting

Create a comprehensive worker portal for the Kelmah platform:
1. Design and implement a worker dashboard with key metrics
2. Build job management screens (active, completed, available jobs)
3. Create a job application/proposal submission interface
4. Develop a worker profile editor with all required sections
5. Implement a schedule/availability management calendar
6. Create skills assessment and verification interfaces
7. Build an earnings tracking and reporting section
8. Develop a document upload system for verification
9. Implement a reviews and ratings display
10. Create responsive designs that work well on mobile devices

Develop a complete hirer portal for the Kelmah platform:
1. Create a job posting interface with detailed forms
2. Build a worker search and discovery screen with filters
3. Implement job management dashboard for hirers
4. Create worker comparison tools
5. Develop proposal review and worker selection screens
6. Build job progress tracking and milestone approval
7. Implement payment release functionality
8. Create a worker review submission system
9. Develop a saved/favorite workers section
10. Add analytics for hiring history and preferences

Complete the Kelmah real-time messaging system:
1. Implement Socket.io for real-time message delivery
2. Create conversation management endpoints and UI
3. Build message read status tracking
4. Implement file and image attachment support
5. Create typing indicators and online status
6. Develop chat history with pagination
7. Build notification integration for new messages
8. Create mobile-responsive chat interfaces
9. Implement message search functionality
10. Add encryption for message security

Design and implement a comprehensive notification system for Kelmah:
1. Create a notification service with multiple delivery channels (in-app, email, SMS)
2. Implement notification preferences and settings
3. Build real-time notification delivery using WebSockets
4. Create notification templates for different event types
5. Implement notification read/unread status tracking
6. Develop a notification center UI component
7. Create batch notification processing for performance
8. Implement priority levels for different notification types
9. Add notification analytics
10. Create a notification management system for administrators

Enhance the Kelmah search and matching system:
1. Implement advanced filtering with multiple criteria
2. Create geolocation-based search functionality
3. Develop an AI-powered matching algorithm for job recommendations
4. Build skills-based worker recommendation engine
5. Implement search result caching for performance
6. Create search analytics to track popular search terms
7. Develop saved search functionality with notifications
8. Implement natural language processing for search queries
9. Build advanced sorting options (relevance, rating, price)
10. Create visual search result display with maps integration

Build a comprehensive review and rating system for Kelmah:
1. Create detailed review submission forms with multiple criteria
2. Implement rating calculation algorithms
3. Build review moderation tools
4. Develop review response functionality
5. Create review analytics and reporting
6. Implement review verification to ensure authenticity
7. Build review highlights for worker profiles
8. Create rating distribution visualizations
9. Implement review search and filtering
10. Develop trust signals based on review patterns

Optimize the Kelmah platform for mobile devices:
1. Implement responsive designs for all pages
2. Create mobile-specific navigation patterns
3. Optimize performance for slower connections
4. Implement touch-friendly UI components
5. Create a progressive web app configuration
6. Develop offline capabilities for key features
7. Optimize image loading and processing for mobile
8. Implement mobile-specific features (location services, camera access)
9. Create mobile-optimized forms with simplified inputs
10. Build swipe-based interaction patterns for common actions

Design and implement a contract management system for Kelmah:
1. Create contract templates for different job types
2. Implement digital signature functionality
3. Build contract negotiation features
4. Develop milestone and deliverable tracking
5. Create contract status monitoring
6. Implement dispute resolution processes
7. Build contract search and filtering
8. Create contract analytics and reporting
9. Implement contract archiving and retrieval
10. Develop contract notification integration

Create a comprehensive admin dashboard for Kelmah platform management:
1. Implement user management with CRUD operations
2. Build content moderation tools
3. Create analytics and reporting dashboards
4. Implement system configuration management
5. Develop payment oversight and transaction monitoring
6. Build verification approval workflows
7. Create support ticket management
8. Implement platform health monitoring
9. Build fraud detection and prevention tools
10. Create admin action logging and audit trails

payment service with Ghana-specific payment methods (Mobile Money, Paystack, Flutterwave) along with international options. Here are the recommended next steps for completing the Kelmah platform.

Here are the recommended next steps for completing the Kelmah platform.

## High Priority Tasks

### 1. Authentication System = done.
- Implement secure user registration with email verification
- Add JWT-based authentication with token refresh
- Create password reset functionality
- Build role-based authorization (worker vs hirer)
- Implement authentication middleware for protected routes

### 2. Database System
- Convert remaining mock data to real PostgreSQL models
- Create migration scripts
- Implement data validation and sanitization
- Add error handling for database operations
- Create seeding scripts for development and testing

### 3. Complete Payment Integration
- ✓ Implement escrow functionality for job payments
- ✓ Implement payment dispute resolution
- ✓ Create invoicing and receipt generation
- ✓ Build worker payout system with Ghana-specific withdrawal methods

## Medium Priority Tasks

### 4. User Portals
- **Worker Portal**:
  - Dashboard with key metrics
  - Job management screens
  - Profile editor
  - Earnings tracking
  - Document verification

- **Hirer Portal**:
  - Job posting interface
  - Worker search with filters
  - Proposal review screens
  - Job progress tracking
  - Payment release functionality

### 5. Messaging System
- Implement Socket.io for real-time messages
- Create conversation management
- Add file/image attachments
- Implement read status tracking
- Build message search functionality

### 6. Notification System
- Create notification service (in-app, email, SMS)
- Implement notification preferences
- Build real-time delivery using WebSockets
- Create notification templates for different events

## Lower Priority Tasks

### 7. Search & Matching System
- Advanced filtering with multiple criteria
- Geolocation-based search
- Skills-based worker recommendations
- Implement search result caching

### 8. Review & Rating System
- Create review submission forms
- Implement rating calculation algorithms
- Build review moderation tools
- Develop review response functionality

### 9. Mobile Optimization
- Implement responsive designs
- Optimize for slower connections
- Create mobile-specific navigation
- Implement touch-friendly components

### 10. Contract Management
- Create contract templates
- Implement digital signatures
- Build milestone tracking
- Develop dispute resolution processes

### 11. Admin Dashboard
- User management with CRUD operations
- Content moderation tools
- Analytics and reporting
- System configuration management
- Payment oversight and monitoring

## Implementation Approach

1. **Authentication First**: This is the foundation of your application and should be implemented before other features.

2. **Use the Payment Service Architecture as a Template**: The payment service provides a good architectural pattern to follow for other microservices.

3. **Develop in Iterations**: Implement each feature as a minimum viable product (MVP) first, then enhance it in subsequent iterations.

4. **Test Early and Often**: Create thorough tests for each component as you develop them.

5. **Document as You Go**: Continue to document APIs, models, and workflows as they are implemented.

## Ghana-Specific Considerations

1. **Mobile-First Design**: Ghana has high mobile usage, so prioritize mobile experience.

2. **Network Resilience**: Design for intermittent connectivity.

3. **Payment Methods**: Continue to prioritize Mobile Money and local payment processors.

4. **Localization**: Consider adding Ghanaian languages and local currency formatting.

5. **Compliance**: Ensure compliance with Ghana's data protection laws and financial regulations.

## Development Roadmap



### Phase 2 (2-3 months)
- Build Worker and Hirer Portals
- Implement Messaging System
- Create Notification System

### Phase 3 (3-4 months)
- Develop Search and Matching
- Build Review and Rating System
- Implement Contract Management
- Create Admin Dashboard

### Phase 4 (Ongoing)
- Mobile Optimization
- Performance Improvements
- Analytics and Reporting
- Security Enhancements

## Getting Started

To continue development, follow these steps:

1. Review the existing codebase, particularly the payment service
2. Identify dependencies between features
3. Prioritize tasks based on user needs and dependencies
4. Begin with authentication and database systems
5. Use the same patterns and practices throughout the application 
Master3plan — Kelmah Project Completion and Hardening Plan

## 1) Executive summary

Kelmah’s core is in place: a microservices backend (auth, user, job, messaging, payment, review) behind an API Gateway, with a React frontend. The biggest gaps are security hardening consistency, worker-facing feature depth (bookmarks, availability, verification, portfolio management, analytics), CORS unification, and standardized rate limiting/logging across services. This plan prioritizes production-readiness, security, and worker experience completion while aligning with the black/gold/white UI theme and the project’s Ghana-focused payments and verification flows.

## 2) What we found (issues and underdeveloped areas)

- Authentication and token handling
  - Multiple services enforce JWT presence and use `shared/utils/jwt` for `iss/aud` verification. Good baseline.
  - API Gateway fail-fast on `JWT_SECRET` is implemented; several services (user, job, messaging, payment) also fail-fast. Confirm the same for all services and environments (auth-service check is implied in utils but ensure a startup-level validator exists).
  - Revocation/rotation strategy incomplete: no JTI blacklist or version invalidation persisted across services (tokenVersion exists on user models but distribution is inconsistent across services).
  - Some downstream routes assume “trust gateway” (e.g., `user-service` `profile.routes.js` only checks Bearer presence). Risk if a service is exposed directly; add local verification for defense-in-depth.

- CORS
  - CORS configured in all services, but allowlist sources vary and include hardcoded domains (e.g., multiple Vercel variants). Unify to environment-driven allowlist with regex support for Vercel previews. Remove any permissive fallbacks.
  - Gateway properly centralizes CORS and proxies WebSocket upgrade for Socket.IO. Ensure proxies never overwrite CORS headers (already avoided in `serviceProxy`).

- Rate limiting
  - Mixed approaches: gateway global limiter; services sometimes use local `express-rate-limit` or a shared Redis-backed limiter. Normalize via shared limiter module (Redis preferred, memory fallback) with clear per-route policies (auth, messages, reviews, payments, uploads).

- Logging and observability
  - Console logs are verbose in messaging and other services. Standardize JSON structured logging with correlation IDs (gateway already sets `X-Request-ID`), masking secrets, and per-service log levels. Add error boundaries and request metrics.

- Messaging service
  - Socket.IO with auth, rooms, typing indicators, and basic message flows present. Items to complete: pagination, attachments to S3 by default, read receipts with timestamps, message editing/reactions, encrypted-at-rest payloads/E2E envelope (phase-in), reconnection robustness & metrics dashboards.

- Review service
  - Mature endpoints and moderation scaffolding; trusts `X-User-ID` from gateway. Add in-service JWT verification for defense-in-depth (optional but recommended) and expand automated moderation rules and analytics.

- Payment service
  - Stripe and Paystack integrations wired, escrow model present. TODOs remain (e.g., “notify hirer on milestone completion”). Harden webhooks, idempotency stores, and full payout flows, plus Ghana Mobile Money (MTN/Vodafone/AirtelTigo) finalization and dispute workflows.

- User service (worker domain)
  - Mixed MongoDB+Sequelize model architecture supported; portfolio/certificates/upload routes exist. Authentication on some routes assumes gateway trust. Missing: worker bookmarks API, complete availability planner, worker analytics (earnings, success rate, wallet/escrow rollups), skills verification integration (Ghana verification), search indexing.

- Frontend (worker)
  - Beautiful WorkerProfile UI with animations and tabs implemented; several values are placeholders or mock (bookmarks, stats, availability defaults). Need API wiring for bookmarks, real stats, wallet/escrow, availability editor, verification badges, and messaging deep-link reliability.

- Config and secrets
  - `.env.example` and scripts exist. Ensure no secrets printed; email service logs are safe (“[set]/[unset]”). Some defaults like `INTERNAL_API_KEY || 'internal-request'` should be required in production. Unify env names across services.

- Redundancy/duplication
  - Two rate limiters in `src/` (`rateLimit.js` and `rateLimiter.js`), and monolith `kelmah-backend/src` vs microservices. Establish a clear deprecation policy for old codepaths to reduce confusion.

- Testing and QA
  - Tests exist in places but coverage is uneven. Need high-signal integration tests across gateway→services, auth flows, payments/webhooks, messaging socket, and worker flows.

## 3) Security and stability hardening (immediate actions)

- Enforce startup validators in every service (including auth-service) for: `JWT_SECRET`, `JWT_REFRESH_SECRET` (where applicable), DB URIs, CORS allowlist, and internal keys. Abort startup on missing critical envs.
- Standardize JWT: access 15m, refresh 7d, `iss/aud` enforced, include `jti` and `version`; persist tokenVersion invalidation on password change/logout-all.
- Add optional in-service JWT verification (not only gateway trust) on sensitive routes to prevent lateral bypass if a service is inadvertently exposed.
- Unify CORS via env-driven allowlist; add regex support for Vercel previews. Remove hardcoded domains from services; centralize in gateway; services should still defend with the same allowlist.
- Normalize rate limiting via shared Redis-backed limiter with per-surface policies (auth/login/register stricter; messages and reviews moderate; payments strict).
- Replace console logs with structured loggers; include `requestId`, `userId`, and latency; redact secrets.

## 4) Worker experience: gaps to close

- Bookmarks API: create endpoints to add/remove/query bookmarked workers; wire frontend toggle.
- Availability planner: CRUD endpoints and UI editor; schema for per-day slots, exceptions, vacations; integrate into search filters.
- Worker analytics: real stats from jobs/payments/reviews: completed jobs, cancel rate, earnings, escrow, response time; backend aggregation endpoints and frontend charts.
- Verification: integrate with Ghana identity/skills/certification APIs (as noted TODO). Surface verified badges with metadata.
- Portfolio & certificates: finalize upload to S3 via presigned URLs, add moderation flags, sharing links/QR, and view counters.
- Messaging deep-links: ensure `/messages?recipient={workerId}` always resolves/create conversation and lands on correct thread.

## 5) Payments/escrow: productionization

- Finalize Mobile Money integrations (MTN/Vodafone/AirtelTigo): ensure verification hooks, error mapping, provider availability checks, and currency/fee rules.
- Webhooks: confirm raw-body handling precedes global JSON body parser for those routes; maintain idempotency tables (already present) with TTL/archival.
- Escrow lifecycle: create→fund→milestone release→partial refund→dispute→resolution; emit notifications to hirer/worker; update wallet and transaction ledgers.
- Admin tools: payout queue, manual reconciles, provider status dashboard, retry queues, and export reports.

## 6) Messaging: feature completion

- Pagination and infinite-scroll (server-side cursors); consistent sort/indexes.
- Read receipts with timestamps; typing indicators already present.
- Message editing and reactions with audit trail.
- Attachments: switch to S3 by default; content-type allowlist; virus scanning hook or scanning queue (future).
- Optional E2E envelope (phase-in): per-conversation public keys; encrypt message body client-side; store ciphertext and metadata; begin with opt-in beta.
- Monitoring: socket metrics endpoints exist; build admin dashboard panels and alerts.

## 7) Reviews: quality and moderation

- Add ML/heuristics for spam/inappropriate content; auto-hold/flag pipeline.
- Expand analytics: rating distribution over time, impact on search ranking.
- Defense-in-depth JWT verify on sensitive write routes (optional).

## 8) Search and discovery

- Worker ranking: combine proximity, rating, verification, responsiveness, completion rate, price; expose weightings via config flags.
- Indexing: add compound indexes on location/skills/ratings; background sync jobs.
- Geo search: ensure location normalization (district/region), distance filters.

## 9) Observability, performance, and resilience

- Introduce OpenTelemetry tracing across gateway and services; export to vendor (e.g., Grafana Tempo/Jaeger) with service maps.
- Error monitoring (Sentry) frontend and backend.
- Health and readiness: all services expose `/health`, `/health/ready`, `/health/live` consistently; gateway aggregates.
- Circuit breakers/timeouts/retries toward services and providers; backoff policies; bulkhead limits.

## 10) Compliance and data governance

- Data retention for messages and logs; PII minimization; export/delete account flows.
- Security headers via Helmet (already present) + CSP tuning and strict transport security.

## 11) Testing strategy

- Unit: services (auth, messaging, payment, review, user, job) for controllers/utils.
- Integration: gateway→service happy paths and error paths; JWT flows; CORS; rate limiting.
- E2E: critical user journeys (register/login; search→message→hire→escrow→review).
- Load tests: messaging spikes; search queries; webhook bursts.

## 12) Detailed work plan by phase

Phase 0: Security, CORS, and rate limiting (Week 1)
- Add startup validators in all services (auth-service included) for `JWT_SECRET`, `JWT_REFRESH_SECRET`, DB URIs, `ALLOWED_ORIGINS`, `INTERNAL_API_KEY`.
- Centralize CORS allowlist at gateway with regex for Vercel previews; propagate same env to services; remove hardcoded arrays.
- Standardize rate limiting using shared Redis-backed limiter with memory fallback; apply policies:
  - Auth: login/register (20 req/15m/email+IP), password reset (5/15m/email+IP)
  - Messaging API: 1000/15m/IP; sockets: 60 messages/minute/socket
  - Reviews: 100/15m/IP; submissions: 10/15m/user
  - Payments: 50/15m/IP; webhooks unthrottled but verified
- Replace console logs with structured logging; propagate `X-Request-ID`.

Phase 1: Worker experience foundation (Weeks 2–3)
- Bookmarks API (user-service): POST/DELETE/GET; connect `WorkerProfile` toggle.
- Availability planner: schema + endpoints + UI editor; integrate with worker search filters and profile.
- Worker analytics endpoints: jobs completed/cancelled, response time, earnings, escrow; wire to dashboard.
- Verification integration stubs (Ghana APIs) with mock adapters and feature flags; badge UX in frontend.
- Portfolio/certificates: enforce S3 presigned uploads in production; moderation flags and share links.

Phase 2: Messaging feature completion (Weeks 4–5)
- Server-side pagination; indexes; query limits; consistent DTOs.
- Read receipts and typing refinements; message editing/reactions.
- S3 attachments and content-type allowlist; size caps; virus scanning hook.
- Optional E2E envelope beta (gated flag) with key management and migration path.

Phase 3: Payments/escrow productionization (Weeks 6–7)
- Finalize Mobile Money integrations; provider status checks and graceful degradation.
- Escrow lifecycle notifications; payout queue; reconciliation job; admin panels.
- Webhook security tests and idempotency reliability; audit logs.

Phase 4: Reviews and search ranking (Week 8)
- Moderation heuristics; hold/flag workflow.
- Ranking model + A/B toggles; indices; performance profilers.

Phase 5: Observability and resilience (Week 9)
- OpenTelemetry tracing; Sentry; dashboards for sockets/payments.
- Timeouts/retries/backoff; circuit breakers.

Phase 6: QA hardening and docs (Week 10)
- E2E test suite across journeys; load testing; perf budget.
- Update docs, environment matrices, runbooks, and incident playbooks.

## 13) Concrete implementation tasks (by component)

API Gateway
- Enforce env validation (already partly present). Require `INTERNAL_API_KEY` (no default) in production.
- CORS: switch to `CORS_ALLOWLIST` env; keep Vercel regex patterns.
- WebSocket proxying: already handled; add metrics route for socket status summary.
- Add per-route limiter middleware reuse.

Auth Service
- Startup validator for required secrets and mailer config.
- Implement token revocation via `tokenVersion` increments and persistent refresh token rotations (store jti); add logout-all sessions endpoint.
- Optional OAuth (Google) behind env flags; finalize 2FA flows.

User Service (Worker)
- Harden auth middleware to verify JWT locally (defense-in-depth) while still trusting gateway headers.
- Implement Bookmarks API; extend `WorkerProfile` UI.
- Implement availability CRUD and validation; worker stats aggregation endpoints.
- Presigned S3 uploads default in production; direct uploads only in dev.
- Ghana verification integration stubs with configurable providers; audit logs of verification attempts.

Job Service
- Validate job posting/editing payloads with Joi/Celebrate; ownership checks; indexing for search.
- Contracts endpoints fully wired; status transitions and permissions.

Messaging Service
- Implement message list pagination; consistent DTO shapes; indexes.
- Add read receipts timestamps; edit/reaction endpoints; audit history.
- S3 attachments and access controls; cleanup of local `uploads` in production.
- Socket metrics surface and admin panels.

Payment Service
- Finalize Ghana MoMo providers; normalize errors and statuses.
- Webhook robustness (already raw-body); confirm body-parser ordering at app-level; idempotency store TTLs.
- Escrow notifications to hirer/worker; admin reconcile job; payout schedule.

Review Service
- Add optional in-service JWT checks for write routes; moderation heuristics pipeline; analytics endpoints for distribution and trends.

Frontend (Worker)
- Wire bookmarks to API; optimistic toggles.
- Availability editor UI; day-parted slots, vacations; sync to backend.
- Replace placeholder metrics with real stats; wallet/escrow tiles; links to payments.
- Verified badge with tooltip of verification types; link to verifications center.
- Messaging deep-link reliability; create conversation if absent and navigate.
- Consistent theme (black/gold/white) and performance: code-splitting for heavy modules; prefetching for messages.

## 14) Acceptance criteria (high-level)

- Security: All services fail-fast on missing secrets; no wildcard CORS; JWT verified consistently; logs contain no secrets.
- Worker UX: Bookmarks and availability fully functional; verified badges displayed; metrics accurate within ±1% of backend aggregates.
- Messaging: Paginated history; read receipts; edits/reactions; attachments via S3.
- Payments: Full escrow lifecycle with notifications; webhook idempotency confirmed; admin reconciles succeed.
- Reviews: Moderation flags and analytics; ranking influences search results measurably.
- Observability: Traces and error rates visible; SLO dashboards for p95 latency on key endpoints.

## 15) Environment and configuration matrix (summary)

- Shared: `JWT_SECRET`, `JWT_REFRESH_SECRET`, `JWT_ISSUER`, `JWT_AUDIENCE`, `ALLOWED_ORIGINS`, `INTERNAL_API_KEY`, `REDIS_URL`, `LOG_LEVEL`
- Auth: SMTP creds (`SMTP_HOST`, `SMTP_PORT`, `SMTP_USER`, `SMTP_PASS`, `EMAIL_FROM`), optional OAuth keys
- Messaging: `MONGODB_URI`/`DATABASE_URL`, `S3_BUCKET`, `AWS_REGION`, `S3_ALLOWED_CONTENT_TYPES`, `S3_MAX_SIZE_MB`
- User: `MONGODB_URI` (+ optional `USER_SQL_URL`), S3 variables as above
- Job: SQL/Mongo connection as configured; indexing flags
- Payment: `STRIPE_SECRET_KEY`, `STRIPE_WEBHOOK_SECRET`, `PAYSTACK_SECRET_KEY`, `PAYSTACK_PUBLIC_KEY`, `PAYSTACK_WEBHOOK_SECRET`, MoMo provider keys
- Review: `MONGODB_URI`

## 16) Timeline (indicative)

- Week 1: Phase 0
- Weeks 2–3: Phase 1
- Weeks 4–5: Phase 2
- Weeks 6–7: Phase 3
- Week 8: Phase 4
- Week 9: Phase 5
- Week 10: Phase 6

## 17) Risks and mitigations

- Service drift (CORS/limits differ): centralize configs and add config validator CI check.
- Provider instability (payments): provider status health checks and circuit breakers.
- Messaging load spikes: socket rate caps and backpressure; autoscale guidance.
- Data quality for analytics: nightly aggregation jobs with checksums.

## 18) Deliverables

- Hardened services with consistent security posture
- Completed worker features with polished UI and analytics
- Production-ready messaging, reviews, and payments
- Observability and SLO dashboards
- Comprehensive tests and updated documentation



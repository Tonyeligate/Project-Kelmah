Kelmah Master Plan (Advanced) — Findings, Gaps, and Completion Strategy

Executive Overview
- Purpose: Deliver a production-grade marketplace connecting vocational workers with hirers, with secure auth, worker/hirer portals, real-time messaging, escrowed payments (Ghana-first), search/matching, ratings, and notifications.
- Current state: Majority of modules exist (frontend worker/hirer UIs, microservices, gateway, messaging, payments stubs). Several inconsistencies, missing integrations, and under-developed areas remain.
- Strategy: Stabilize core (auth, configuration, messaging, payments), complete worker-domain flows end-to-end, then expand search/matching, reviews/notifications, admin, and mobile optimization. Drive via short, verifiable milestones with CI, load tests, and error budgets.

A. Concrete Findings and Under‑Developed Areas

A1. Architecture and Configuration
- Polyglot persistence mixed-state:
  - MongoDB is used in messaging-service, payment-service, and parts of auth-service.
  - PostgreSQL/Sequelize models for worker domain exist in user-service, but often disabled unless USER_SQL_URL/DATABASE_URL is set; logs show "PostgreSQL not configured, using MongoDB-only models". Risk: Worker features degrade silently without SQL.
- Duplicate/fragmented frontend config:
  - `src/config/api.js` and `src/config/environment.js` diverge in base URLs and endpoint definitions; risk of inconsistent routing.
- Gateway coverage gaps:
  - Gateway proxies /api/messages but not /api/conversations; some clients call `/api/conversations` (messaging-service expects this). Missing proxy path can break dev if clients route via gateway.
- WebSocket proxying:
  - Gateway sets `ws: true` only for /api/messages; no `/socket.io` proxy helper exposed for dev; Vite proxy has a mapping but environments diverge.

A2. Authentication & Security
- Secrets logging in auth-service email config prints sensitive envs; should remove secrets from logs.
- No startup fail-fast for missing JWT secrets in gateway/auth-service (middleware checks at runtime; better validate on boot to avoid half-running services).
- Rate limiting: TODO noted to move memory-based to Redis. Some rate limiter wiring exists, but not consistently enabled across services.
- Token lifecycle:
  - Token payload sometimes read as `decoded.sub || decoded.id`; align issuer/audience and consistent `sub` usage across services.
  - Optional online revocation path exists (gateway `VALIDATE_TOKENS_WITH_SERVICE`), but not enforced by default.

A3. Messaging (Real-time + REST)
- Server: Robust Socket.IO server with rooms, typing, read receipts, attachments routes; event names `send_message`, `messages_read`, etc. Good foundation.
- Client: Two messaging clients coexist:
  - Legacy component `modules/messaging/components/common/Messages.jsx` uses native WebSocket to `ws://localhost:3000/ws` and plain REST `/api/conversations`. Mismatch with Socket.IO and gateway.
  - Current context `modules/messaging/contexts/MessageContext.jsx` uses socket.io-client to the messaging service and REST fallbacks. This is the source of truth; remove or migrate the legacy component.
- API pathing:
  - Current client uses direct messaging-service base URL in production via `environment.js`, but other parts assume gateway; ensure a single convention.

A4. Payment & Escrow (Ghana-first)
- Escrow models/controllers exist (Mongo) with fund/release/refund endpoints; wallet/transaction models present. Good base.
- Ghana Mobile Money integrations present (MTN, Vodafone, AirtelTigo) controllers/integrations exist but require runtime secrets; validation around envs and error handling needs hardening.
- Paystack integration exists; throws when keys missing (good) but webhook path and signature verification must be verified across environments.
- Frontend service expects bank transfer endpoints and settings; ensure corresponding backend routes exist or de-scope.
- Idempotency keys implemented in payments.routes for create intents (good); extend coverage to other flows.

A5. Worker Domain (Priority for this project)
- Frontend: Rich worker UI (profile, portfolio, certificates, metrics, availability, earnings). Animated, themed (black/gold/white) — strong foundation.
- Backend: `user-service` includes Sequelize worker models and controllers (get/search/update profile, skills). Additional endpoints for portfolio/certificates/availability exist across files, but require SQL configuration; silent fallback to Mongo disables features.
- Gaps:
  - Without Postgres, many advanced worker queries/sorts will underperform or break.
  - Some frontend services call routes not mapped in gateway or not implemented consistently (e.g., stats, work-history). Validate coverage.

A6. Search & Matching
- Enhanced services exist (aiMatchingService, enhancedSearchService, searchCacheService) on the frontend, but backend advanced search (geo, PostGIS, ML ranking) is not fully implemented; current worker search uses simple filters and bounding-box heuristics.

A7. Reviews & Ratings
- Frontend components exist; backend review-service present; ensure all routes are proxied and consistent (public read vs protected write), moderation endpoints exist and are behind admin role.

A8. Notifications
- Frontend notification context and service stubs exist and sometimes connect via WebSocket; no dedicated notification-service in backend tree. Missing service needs to be implemented or de-scoped.

A9. Observability & DX
- Logging: verbose console across services (including secrets). Standardize structured logging and sanitization.
- Health endpoints exist; unify readiness/liveness; add uptime/dep states consistently.
- Tests: Unit/API tests present but coverage unknown; add integration/E2E focus for cross-service flows.

B. Master Plan — Phased Delivery with Acceptance Criteria

Phase 0 (Week 1): Stabilization & Alignment
1) Config and Secrets Hygiene
- Unify frontend config: Keep `src/config/environment.js` as the single source of truth; deprecate `src/config/api.js` or convert it into typed exports that import from environment.js.
- Add startup validators across gateway and each service: assert presence of JWT secrets, DB URIs, and service base URLs. Fail-fast with clear logs.
- Remove secrets from logs; ensure only masked values are printed.
Acceptance: All services crash early when JWT_SECRET is missing; no logs emit sensitive env values; one config file used by frontend.

2) Gateway Coverage and WS Proxy
- Add gateway proxies:
  - `/api/conversations` → messaging-service `/api/conversations` (ws: true not required for HTTP).
  - Ensure `/socket.io` proxy (ws: true) path for messaging if clients route through gateway in dev.
- Verify Vite dev proxy aligns with gateway to avoid path drift.
Acceptance: Conversations list loads via gateway in dev; Socket.IO connects via gateway or direct service reliably; smoke tests green.

3) Deprecate Legacy Messaging Component
- Remove or hide `modules/messaging/components/common/Messages.jsx` from routes/exports; migrate any usage to MessageContext-based chat.
Acceptance: Only socket.io-based messaging client is used; no references to native WebSocket client remain.

4) Rate Limiting & CORS
- Turn on Redis-based rate limiting where available for auth and messaging; parameterize via USE_REDIS_RATE_LIMIT.
- Tighten CORS allowlist to explicit origins plus Vercel wildcard pattern; document it in gateway.
Acceptance: Rate limits effective (429 on abuse); CORS observed in logs for blocked origins.

Phase 1 (Weeks 2–3): Worker Domain Completion (Backend + Frontend)
1) Ensure SQL Availability and Fallback Strategy
- Provision Postgres in all environments (dev, staging, prod) for user-service; set USER_SQL_URL.
- If fallback to Mongo is desired for dev, explicitly disable advanced features to avoid silent partial behavior, and show a banner in dev.
Acceptance: Worker endpoints return rich data (skills, portfolio, metrics) on staging; no “PostgreSQL not configured” logs.

2) API Surface Completion & Documentation
- Confirm endpoints exist and are proxied for:
  - `GET/PUT /api/workers/:id` (profile),
  - `PUT /api/workers/:id/availability`,
  - `POST /api/workers/:id/skills`,
  - `GET /api/workers/:id/portfolio` (and CRUD),
  - `GET /api/workers/:id/certificates` (and CRUD),
  - `GET /api/workers/:id/reviews`,
  - `GET /api/workers/:id/stats`, `GET /api/workers/:id/work-history`.
- Update OpenAPI snippet/docs.
Acceptance: All routes return non-500 responses; worker profile page loads all tabs without fallback errors.

3) Frontend Worker UX Enhancements
- Add: quick actions (contact/hire), bookmark API, real-time online presence indicator via MessageContext, availability calendar write-back.
- Performance: Virtualize long lists; prefetch on hover; suspense/loading skeletons already in place.
Acceptance: Lighthouse perf > 85 on worker pages; all buttons functional.

Phase 2 (Weeks 3–4): Messaging Hardening and Feature Finish
1) Event Contract Lockdown
- Finalize event names/payload shapes between server and MessageContext; generate a small event schema doc.
- Add pagination on REST `GET /api/messages/conversation/:id` with consistent `messages` array payload.
Acceptance: Chat works with optimistic updates, acks, read receipts, typing, and REST fallback. Socket reconnects reliably.

2) Attachments & S3
- Enforce S3 uploads in messaging-service when ENABLE_S3_UPLOADS=true; validate content types and size; signed URLs.
Acceptance: File sends under 10MB succeed with preview; blocked types are rejected with 415/400.

3) Notification Hooks
- Emit lightweight in-app notifications via socket for offline recipients (already sketched); plan for notification-service integration in Phase 4.
Acceptance: Opening a chat on another user updates unread counts; in-app toasts show for new messages.

Phase 3 (Weeks 4–6): Payments & Escrow (Ghana-first)
1) Environment and Secrets Validation
- Validate provider configs (MTN/Vodafone/AirtelTigo/Paystack) on startup; expose `/health/payment-providers` with status.
Acceptance: Health returns provider availability; missing keys cause degraded but clear state.

2) Escrow E2E
- Ensure `fundEscrow → releaseEscrow/refundEscrow` flows write transactions, update wallet balances, and push notifications.
- Add idempotency to all money-impacting routes.
Acceptance: Full happy path tested; double submits do not duplicate charges.

3) Webhooks & Reconciliation
- Implement and verify webhooks (Paystack/Stripe if used); signature verification; backoff/retry store; dashboard visibility.
Acceptance: Webhook delivery verified in staging; reconciliation task resolves pending → completed.

4) Worker Payouts
- Add payout endpoints and UI with method management; integrate MoMo payouts (if provider supports) or bank EFT.
Acceptance: Payout request creates transaction, status tracked, and reflected in wallet.

Phase 4 (Weeks 6–8): Search, Matching, Reviews, Notifications
1) Search & Matching
- Implement PostGIS-based geo search and distance sorting; expand filters; cache hot searches; add simple ranking (skills match, rating, proximity, responsiveness).
Acceptance: Search latency p95 < 300ms on cached; results ranked as expected.

2) Reviews & Moderation
- Finalize review submission, response, moderation, analytics; ensure gateway routes align (public reads, protected writes/admin moderation).
Acceptance: Review screens fully functional; admin queue operational.

3) Notifications Service (MVP)
- Create `notification-service` with in-app + email channels; preferences and unread counts; integrate with messaging/payment events.
Acceptance: Notifications arrive in near real-time (<2s) and are persisted; user can mute types.

Phase 5 (Weeks 8–9): Admin, Analytics, Mobile Optimization
- Admin dashboard for users, content/moderation, payments oversight, and system health.
- Mobile: polish animations, input ergonomics, offline support for chat drafts, better asset loading.
Acceptance: Admin flows complete; mobile usability validated via test plan; Core Web Vitals pass.

C. Cross‑Cutting Workstreams
- Observability: Standardize winston/pino with JSON logs; log redaction for PII; correlate request IDs across services.
- Testing: Expand unit/integration tests; add E2E (Playwright/Cypress) for auth, worker flows, messaging, payments.
- Security: CSP headers verified; Helmet across services; dependency audit; rotate JWT secrets per environment; add jti blacklist or short TTL + refresh.
- Data: Migrations for SQL; backups for Mongo/SQL; seed scripts for dev datasets.

D. Concrete Task Board (Ready-To-Work)
Immediate (Phase 0)
- Backend
  1) Add env validators to gateway/auth/user/job/messaging/payment to fail-fast on missing JWT_SECRET and required URLs.
  2) Remove secrets from logs in auth-service email service.
  3) Gateway: add `/api/conversations` proxy to messaging-service; add optional `/socket.io` ws proxy helper.
  4) Enable Redis rate limiting in auth-service; set USE_REDIS_RATE_LIMIT=true in staging/prod.
- Frontend
  5) Remove/disable legacy `modules/messaging/components/common/Messages.jsx` from router. Route messaging through MessageContext everywhere.
  6) Consolidate on `config/environment.js`; refactor `config/api.js` consumers to import from environment.

Near Term (Phase 1–2)
- Backend
  7) Ensure PostgreSQL is provisioned; set USER_SQL_URL; run Sequelize migrations for worker models.
  8) Complete worker routes (portfolio/certs/stats/history) and verify gateway paths.
  9) Messaging REST pagination, attachments S3 enforcement, event schemas.
- Frontend
  10) Worker profile: add bookmark API; presence chip from MessageContext; editable availability calendar write-back.
  11) Chat: add message search and conversation filters; unify timestamp & read receipts.

Payments (Phase 3)
  12) Provider readiness checks & health; webhook endpoints and dashboards; escrow E2E tests; payout flows.

Search/Reviews/Notifications (Phase 4)
  13) PostGIS geo search; ranking; cache.
  14) Review moderation UI + analytics.
  15) Notification-service MVP with preferences.

E. Acceptance, Rollout, and Risk Controls
- Environments: dev → staging → prod with gates.
- Release checklist per phase: unit/integration/E2E green; health endpoints OK; error rate < 0.5%; latency SLOs met.
- Rollback: blue/green for services (Render/Heroku); feature flags for new capabilities.
- Risks: Payment provider downtime (mitigate with retries & graceful degradation); dual-database complexity (document schemas and migrations); WebSocket scaling (enable sticky sessions / Redis adapter if needed).

F. Milestone Timeline (Indicative)
- Week 1: Phase 0 stabilization complete.
- Weeks 2–3: Worker domain done E2E, staging.
- Weeks 3–4: Messaging hardened, attachments in S3, audit.
- Weeks 4–6: Payments/escrow Ghana-first live on staging; webhooks tested; payouts pilot.
- Weeks 6–8: Search/matching, reviews moderation; notification-service MVP.
- Weeks 8–9: Admin + mobile polish; production readiness.

G. Done Definition (Project)
- Users can register/login with verified email and MFA (optional), browse/search workers, message in real-time, create contracts, fund escrow via local Ghana methods, release/refund payments, rate/review, receive notifications, and admins can moderate and oversee transactions.
- All services have health probes, logs, metrics, tests, and documented APIs.

Appendix: Quick Fixes to Prioritize Immediately
- Remove SMTP secret logging in auth-service email config.
- Add `/api/conversations` proxy in API gateway.
- Delete/disable legacy `Messages.jsx` from routing.
- Set USER_SQL_URL in env and run worker migrations.
- Enforce JWT secret presence at service startup (fail-fast).

End of Master Plan







#!/usr/bin/env node

/**
 * Environment Setup Script
 * Sets up environment variables for all Kelmah services
 */

const fs = require('fs');
const path = require('path');

// Default environment configuration
const defaultEnv = {
  // API Gateway
  API_GATEWAY_PORT: '3000',
  INTERNAL_API_KEY: 'kelmah_internal_api_key_change_this',

  // JWT Configuration
  JWT_SECRET: process.env.JWT_SECRET || 'your_jwt_secret_key_change_this_in_production',
  JWT_REFRESH_SECRET: 'your_refresh_token_secret_change_this_in_production',
  JWT_PUBLIC_KEY: 'public_key_here',

  // MongoDB Configuration
  MONGO_ROOT_USERNAME: 'kelmah_admin',
  MONGO_ROOT_PASSWORD: 'strong_mongo_password',
  MONGODB_URI: 'mongodb://localhost:27017/kelmah_platform',
  DATABASE_URL: 'mongodb://localhost:27017/kelmah_platform',
  MONGO_URI: 'mongodb://localhost:27017/kelmah_auth',

  // Service URLs (Local Development)
  AUTH_SERVICE_URL: 'http://localhost:5001',
  USER_SERVICE_URL: 'http://localhost:5002',
  JOB_SERVICE_URL: 'http://localhost:5003',
  PAYMENT_SERVICE_URL: 'http://localhost:5004',
  MESSAGING_SERVICE_URL: 'http://localhost:5005',
  NOTIFICATION_SERVICE_URL: 'http://localhost:5006',
  REVIEW_SERVICE_URL: 'http://localhost:5007',

  // Service Ports
  AUTH_SERVICE_PORT: '5001',
  USER_SERVICE_PORT: '5002',
  JOB_SERVICE_PORT: '5003',
  PAYMENT_SERVICE_PORT: '5004',
  MESSAGING_SERVICE_PORT: '5005',
  REVIEW_SERVICE_PORT: '5007',

  // CORS Configuration
  ALLOWED_ORIGINS: 'http://localhost:5173,http://localhost:3000',
  CORS_ALLOWLIST: 'http://localhost:5173,http://localhost:3000',

  // Redis (if available)
  REDIS_URL: 'redis://redis:6379',
  REDIS_PASSWORD: 'strong_redis_password',

  // Logging
  LOG_LEVEL: 'info',

  // Node Environment
  NODE_ENV: 'development',

  // Frontend Configuration
  FRONTEND_URL: 'http://localhost:5173',
  VITE_API_URL: 'http://localhost:3000'
};

function createEnvFile(servicePath, envVars) {
  const envPath = path.join(servicePath, '.env');

  let envContent = '# Kelmah Service Environment Variables\n';
  envContent += '# Auto-generated by setup-environment.js\n\n';

  Object.entries(envVars).forEach(([key, value]) => {
    envContent += `${key}=${value}\n`;
  });

  try {
    fs.writeFileSync(envPath, envContent);
    console.log(`‚úÖ Created .env file for ${path.basename(servicePath)}`);
  } catch (error) {
    console.error(`‚ùå Failed to create .env for ${path.basename(servicePath)}:`, error.message);
  }
}

function setupServiceEnvironments() {
  const servicesDir = path.join(__dirname, 'services');

  if (!fs.existsSync(servicesDir)) {
    console.error('‚ùå Services directory not found');
    return;
  }

  const services = fs.readdirSync(servicesDir, { withFileTypes: true })
    .filter(dirent => dirent.isDirectory())
    .map(dirent => dirent.name);

  console.log('üöÄ Setting up environment files for services...\n');

  services.forEach(serviceName => {
    const servicePath = path.join(servicesDir, serviceName);

    // Customize environment variables based on service
    const serviceEnv = { ...defaultEnv };

    // Add service-specific variables
    switch (serviceName) {
      case 'auth-service':
        serviceEnv.SERVICE_NAME = 'auth-service';
        serviceEnv.DATABASE_URL = 'mongodb://localhost:27017/kelmah_auth';
        break;

      case 'user-service':
        serviceEnv.SERVICE_NAME = 'user-service';
        serviceEnv.DATABASE_URL = 'mongodb://localhost:27017/kelmah_user';
        break;

      case 'job-service':
        serviceEnv.SERVICE_NAME = 'job-service';
        serviceEnv.DATABASE_URL = 'mongodb://localhost:27017/kelmah_jobs';
        break;

      case 'messaging-service':
        serviceEnv.SERVICE_NAME = 'messaging-service';
        serviceEnv.DATABASE_URL = 'mongodb://localhost:27017/kelmah_messaging';
        break;

      case 'payment-service':
        serviceEnv.SERVICE_NAME = 'payment-service';
        serviceEnv.DATABASE_URL = 'mongodb://localhost:27017/kelmah_payment';
        break;

      case 'review-service':
        serviceEnv.SERVICE_NAME = 'review-service';
        serviceEnv.DATABASE_URL = 'mongodb://localhost:27017/kelmah_reviews';
        break;
    }

    createEnvFile(servicePath, serviceEnv);
  });

  // Create API Gateway .env
  createEnvFile(path.join(__dirname, 'api-gateway'), defaultEnv);

  console.log('\n‚úÖ Environment setup complete!');
  console.log('\nüìù Next steps:');
  console.log('1. Update JWT_SECRET and database passwords in the .env files');
  console.log('2. Ensure MongoDB is running on localhost:27017');
  console.log('3. Run the services using the startup scripts');
  console.log('4. Use check-services-health.js to verify everything is working');
}

function checkExistingEnvFiles() {
  const servicesDir = path.join(__dirname, 'services');

  if (!fs.existsSync(servicesDir)) {
    console.log('‚ö†Ô∏è  Services directory not found - running setup...');
    setupServiceEnvironments();
    return;
  }

  const services = fs.readdirSync(servicesDir, { withFileTypes: true })
    .filter(dirent => dirent.isDirectory())
    .map(dirent => dirent.name);

  let hasExistingEnv = false;

  services.forEach(serviceName => {
    const envPath = path.join(servicesDir, serviceName, '.env');
    if (fs.existsSync(envPath)) {
      console.log(`‚ÑπÔ∏è  Existing .env found for ${serviceName}`);
      hasExistingEnv = true;
    }
  });

  if (hasExistingEnv) {
    console.log('\n‚ö†Ô∏è  Existing .env files found!');
    console.log('Do you want to overwrite them? (y/N): ');

    // In a real implementation, you'd wait for user input
    // For now, we'll just show a warning
    console.log('To overwrite, delete existing .env files first or run with --force flag');
  } else {
    setupServiceEnvironments();
  }
}

// Main execution
if (require.main === module) {
  console.log('üîß Kelmah Environment Setup');
  console.log('===========================\n');

  const args = process.argv.slice(2);

  if (args.includes('--force')) {
    console.log('üîÑ Force mode: Overwriting existing .env files...');
    setupServiceEnvironments();
  } else {
    checkExistingEnvFiles();
  }
}

module.exports = { setupServiceEnvironments, createEnvFile };

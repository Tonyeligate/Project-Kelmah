# Kelmah Console Error Inventory — 10 Oct 2025

## 1. WebSocket handshake closes before upgrade
- **Log evidence**
	- `WebSocket connection to 'wss://kelmah-api-gateway-qlyk.onrender.com/socket.io/?EIO=4&transport=websocket' failed: WebSocket is closed before the connection is established.`
- **Code flow (frontend → backend → database)**
	- `kelmah-frontend/src/main.jsx` — wraps the UI with `NotificationProvider`, so dashboards bootstrap notifications immediately after login.
	- `kelmah-frontend/src/modules/notifications/contexts/NotificationContext.jsx` — retrieves the JWT from secure storage and calls `notificationService.connect`.
	- `kelmah-frontend/src/modules/notifications/services/notificationService.js` — resolves `/runtime-config.json`, logs the LocalTunnel host, and opens the Socket.IO client.
	- `kelmah-backend/api-gateway/server.js` — dynamic Socket.IO proxy mounted on `/socket.io` forwards the upgrade to messaging service.
	- `kelmah-backend/services/messaging-service/server.js` — hosts the Socket.IO server and validates tokens before establishing the channel.
	- `kelmah-backend/services/messaging-service/models/Notification.js` — Mongo persistence for notifications once the socket is available (not reached while the handshake fails).
- **Status note**: The frontend now resolves the unified LocalTunnel URL correctly, but the socket still closes before the upgrade completes, indicating the Render-hosted messaging service or proxy is still cold. No regression from the latest frontend fixes; the failure persists until the messaging service finishes booting.

## 2. GET /api/users/workers/:id/availability returns 500
- **Log evidence**
	- `index-Z42n37m6.js:8  GET https://kelmah-api-gateway-qlyk.onrender.com/api/users/workers/6891595768c3cdade00f564f/availability 500 (Internal Server Error)`
- **Code flow (frontend → backend → database)**
	- `kelmah-frontend/src/modules/worker/pages/WorkerDashboardPage.jsx` — renders the worker dashboard shell.
	- `kelmah-frontend/src/modules/dashboard/components/worker/AvailabilityStatus.jsx` — fetches availability on mount and surfaces warm-up messaging.
	- `kelmah-frontend/src/modules/worker/services/workerService.js` — `getWorkerAvailability` wraps the `/api/users/workers/:id/availability` call and attaches fallback metadata.
	- `kelmah-backend/api-gateway/routes/user.routes.js` — proxies `/api/users/workers/:workerId/availability` to the user service with gateway auth.
	- `kelmah-backend/services/user-service/routes/user.routes.js` — `router.get("/workers/:id/availability", verifyGatewayRequest, WorkerController.getWorkerAvailability)`.
	- `kelmah-backend/services/user-service/controllers/worker.controller.js` — `getWorkerAvailability` hydrates shared models, guards Mongo readiness, and returns fallback payloads when cold.
	- `kelmah-backend/services/user-service/models/Availability.js` — Mongo schema backing the `availabilities` collection.
- **Status note**: Local code now returns structured fallback payloads and the dashboard disables toggles while fallback metadata is active, but the production user-service still replies with HTTP 500—likely an out-of-date deployment or Mongo readiness timeout.

## 3. GET /api/users/workers/:id/completeness returns 500
- **Log evidence**
	- `index-Z42n37m6.js:8  GET https://kelmah-api-gateway-qlyk.onrender.com/api/users/workers/6891595768c3cdade00f564f/completeness 500 (Internal Server Error)`
- **Code flow (frontend → backend → database)**
	- `kelmah-frontend/src/modules/worker/pages/WorkerDashboardPage.jsx` — renders worker experience and kicks off profile fetches.
	- `kelmah-frontend/src/modules/dashboard/components/worker/EnhancedWorkerDashboard.jsx` — `useEffect` invokes `workerService.getWorkerStats` for profile completion metrics.
	- `kelmah-frontend/src/modules/worker/services/workerService.js` — `getWorkerStats` requests `/api/users/workers/:id/completeness` and normalizes the response.
	- `kelmah-backend/api-gateway/routes/user.routes.js` — forwards `/workers/:workerId/completeness` calls to the user service.
	- `kelmah-backend/services/user-service/routes/user.routes.js` — `router.get("/workers/:id/completeness", verifyGatewayRequest, WorkerController.getProfileCompletion)`.
	- `kelmah-backend/services/user-service/controllers/worker.controller.js` — `getProfileCompletion` merges `User` and `WorkerProfile` docs, with fallback payloads when Mongo or models lag.
	- `kelmah-backend/services/user-service/models/WorkerProfileMongo.js` & shared `models/index.js` — supply the Mongo schemas used by the controller.
- **Status note**: The controller’s fallback logic now shields cold starts locally, but the Render instance still surfaces 500 responses, implying the hot deployment hasn’t picked up the fix or the database remains unavailable long enough to hit the exception path.

## 4. Review service health checks return 404
- **Log evidence**
	- `2025-10-10T01:16:10.694Z info: HTTP Response {"method":"GET","service":"review-service","statusCode":404,"url":"/api/health"}`
- **Code flow (frontend → backend → service)**
	- `kelmah-frontend/src/utils/serviceHealthCheck.js` — dashboard warm-up triggers `/health/aggregate` immediately after boot.
	- `kelmah-backend/api-gateway/routes/index.js` & `server.js` — health aggregator loops through registered services, including the review service `/api/health` probe.
	- `kelmah-backend/services/review-service/server.js` — exposes `/` and `/api/reviews/*` but lacks an `/api/health` endpoint, so the aggregated check receives 404 responses.
	- `kelmah-backend/services/review-service/models/*` — backing Mongo collections (unused until a health endpoint is implemented).
- **Status note**: The missing health route is unchanged since the previous audit; implementing a simple `/api/health` handler in `review-service` will silence the 404s.

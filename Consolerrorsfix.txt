=== Console Error Trace Log — 2025-10-09 ===

1. Error: HTTP 500 on `GET /api/users/workers/6891595768c3cdade00f564f/availability`
	 • Frontend stack
		 - `kelmah-frontend/src/modules/worker/pages/WorkerDashboardPage.jsx` — entry page that mounts the worker dashboard view.
		 - `kelmah-frontend/src/modules/dashboard/components/worker/EnhancedWorkerDashboard.jsx` — triggers availability fetch during dashboard hydration.
		 - `kelmah-frontend/src/modules/dashboard/components/worker/AvailabilityStatus.jsx` — directly calls the service helper and renders the toggle UI.
		 - `kelmah-frontend/src/modules/worker/services/workerService.js` — issues the Axios request to `/api/users/workers/:id/availability` with gateway fallback handling.
	 • API Gateway
		 - `kelmah-backend/api-gateway/routes/user.routes.js` — authenticated proxy that forwards `/api/users/workers/:workerId/availability` to the user-service.
		 - `kelmah-backend/api-gateway/server.js` — registers service URLs and enforces gateway auth before proxying to downstream services.
	 • User Service
		 - `kelmah-backend/services/user-service/routes/user.routes.js` — binds the availability route, applies `verifyGatewayRequest`, and logs hits before the controller executes.
		 - `kelmah-backend/services/user-service/controllers/worker.controller.js` — `getWorkerAvailability` handler with Mongo warm-up guard and fallback payload builder.
		 - `kelmah-backend/services/user-service/config/db.js` — provides `ensureConnection` logic that times out during cold starts, triggering the 500s seen in logs.
		 - `kelmah-backend/services/user-service/models/index.js` — exposes the service’s models (User, Availability) on the active Mongoose connection.
		 - `kelmah-backend/services/user-service/models/Availability.js` — Mongoose schema backing the availability document queried by the controller.
	 • Database layer
		 - MongoDB Atlas cluster (`availability` collection) — stores the worker availability documents accessed through the above models.
	 • Resolution
		 - Short-circuit the controller when MongoDB hasn’t reached ready state so the dashboard immediately receives the fallback payload instead of a 500 while Atlas warms up. Added a readyState guard ahead of `ensureConnection`.

2. Error: HTTP 500 on `GET /api/users/workers/6891595768c3cdade00f564f/completeness`
	 • Frontend stack
		 - `kelmah-frontend/src/modules/worker/pages/WorkerDashboardPage.jsx` — renders the dashboard container that shows profile strength.
		 - `kelmah-frontend/src/modules/dashboard/components/worker/EnhancedWorkerDashboard.jsx` — loads profile completion stats once the worker ID is available.
		 - `kelmah-frontend/src/modules/dashboard/components/worker/ProfileCompletion.jsx` — displays the completion bar and suggestions using the service response.
		 - `kelmah-frontend/src/modules/worker/services/workerService.js` — `getWorkerStats` helper requesting `/api/users/workers/:id/completeness` and normalising the payload.
	 • API Gateway
		 - `kelmah-backend/api-gateway/routes/user.routes.js` — proxies `/api/users/workers/:workerId/completeness` after auth verification.
		 - `kelmah-backend/api-gateway/server.js` — central gateway orchestrator ensuring the request is authenticated and routed to the user-service URL.
	 • User Service
		 - `kelmah-backend/services/user-service/routes/user.routes.js` — maps the completeness endpoint with gateway verification before reaching the controller.
		 - `kelmah-backend/services/user-service/controllers/worker.controller.js` — `getProfileCompletion` pipeline that reads User and WorkerProfile docs and now returns fallback payloads when Mongo is unavailable.
		 - `kelmah-backend/services/user-service/config/db.js` — same `ensureConnection` readiness check that is still timing out in production.
		 - `kelmah-backend/services/user-service/models/index.js` — injects the shared User model plus worker-specific schemas on the active connection.
		 - `kelmah-backend/services/user-service/models/WorkerProfileMongo.js` — schema used to retrieve detailed profile data during completeness calculations.
	 • Database layer
		 - MongoDB Atlas cluster (`users`, `workerprofiles` collections) — data source queried for profile and completion metrics.
	 • Resolution
		 - Same readiness guard as availability: return the prebuilt fallback payload whenever the connection is still warming up so render cold starts no longer surface a 500.

3. Error: HTTP 401 on `GET /api/users/workers/jobs/recent?limit=6`
	 • Frontend stack
		 - `kelmah-frontend/src/modules/worker/pages/WorkerDashboardPage.jsx` — hosts the dashboard surface where recent jobs are rendered.
		 - `kelmah-frontend/src/modules/dashboard/components/worker/EnhancedWorkerDashboard.jsx` — attempts to populate the recent jobs list during initial data load.
		 - `kelmah-frontend/src/modules/worker/services/workerService.js` — `getWorkerJobs` helper invoking `/api/users/workers/jobs/recent` with query params.
	 • API Gateway
		 - `kelmah-backend/api-gateway/routes/user.routes.js` — authenticates the request (via `authenticate`) and proxies unmatched `/api/users/*` routes, including `/workers/jobs/recent`, to user-service.
		 - `kelmah-backend/api-gateway/server.js` — enforces JWT verification and forwards the Authorization header used later by the user-service to call downstream job APIs.
	 • User Service
		 - `kelmah-backend/services/user-service/routes/user.routes.js` — explicitly registers `/workers/jobs/recent`, logging debug info before calling the controller.
		 - `kelmah-backend/services/user-service/controllers/worker.controller.js` — `getRecentJobs` handler that requires `req.user.id`, fetches job data from the job-service, and falls back to mock jobs when downstream access fails; lacking auth context triggers the 401 response returned in the trace.
	 • Downstream dependencies
		 - `kelmah-backend/services/job-service` (expected endpoint `/api/jobs/worker/recent`) — remote call target; authentication/availability issues here cascade back as 401s.
	 • Resolution
		 - Confirmed gateway now forwards the authenticated user via `verifyGatewayRequest`; remaining 401s were due to the downstream job-service. Controller already falls back to mock data when the job-service rejects.

4. Warning/Error: WebSocket connection dropped (`WebSocket is closed before the connection is established` for `wss://kelmah-api-gateway-qlyk.onrender.com`)
	 • Frontend stack
		 - `kelmah-frontend/src/modules/notifications/contexts/NotificationContext.jsx` — initialises the notification service and calls `notificationService.connect` with the auth token.
		 - `kelmah-frontend/src/modules/notifications/services/notificationService.js` — loads `/runtime-config.json`, selects the WebSocket URL, and instantiates `socket.io-client` toward the gateway.
	 • API Gateway & Socket proxy
		 - `kelmah-backend/api-gateway/server.js` — defines the dynamic Socket.IO proxy mounted at `/socket.io`, relies on `services.messaging` URL to bridge WebSocket traffic to the messaging microservice.
		 - `kelmah-backend/api-gateway/routes/index.js` — mounts messaging routes, ensuring `/api/notifications` and socket traffic share the same service base.
	 • Messaging Service (WebSocket target)
		 - `kelmah-backend/services/messaging-service/server.js` — sets up Socket.IO server and authentication guards for notification events.
		 - `kelmah-backend/services/messaging-service/socket/index.js` — (if enabled) houses socket event registration and namespace handling for notifications.
	 • Database layer
		 - `kelmah-backend/services/messaging-service/models/index.js` + `Notification.js` — backing storage for emitted notification payloads once the socket link is stable.
	 • Resolution
		 - The frontend now hands the actual JWT from secure storage to the socket client so the gateway proxy and messaging service accept the handshake before the cold proxy finishes booting.

5. Error: HTTP 429 on `GET /api/notifications`
	 • Frontend stack
		 - `kelmah-frontend/src/modules/notifications/contexts/NotificationContext.jsx` — polls for current notifications and reacts to socket events.
		 - `kelmah-frontend/src/modules/notifications/services/notificationService.js` — `getNotifications` helper making repeated `/api/notifications` calls and retrying after rate-limit responses.
	 • API Gateway
		 - `kelmah-backend/api-gateway/routes/messaging.routes.js` — proxies `/api/notifications` traffic to the messaging-service while preserving authentication context.
		 - `kelmah-backend/api-gateway/server.js` — applies gateway authentication and forwards the throttled requests downstream.
	 • Messaging Service
		 - `kelmah-backend/services/messaging-service/routes/notification.routes.js` — wraps notification endpoints with a rate limiter via `createLimiter('notifications')`.
		 - `kelmah-backend/services/messaging-service/utils/rateLimiter.js` — rate-limit configuration enforcing the 429 responses seen when the client retries too quickly.
		 - `kelmah-backend/services/messaging-service/controllers/notification.controller.js` — executes the database query for notifications after rate limiting passes.
	 • Database layer
		 - `kelmah-backend/services/messaging-service/models/Notification.js` & `NotificationPreference.js` — Mongoose schemas hit by the controller to fetch and filter notification data.
	 • Resolution
		 - Rate limiter now buckets by authenticated user (with gateway header fallback) instead of shared Render IPs, eliminating 429s for legitimate polling while retaining protection against brute force.

Summary: The console trace highlights persistent cold-start 500s on availability/profile endpoints (despite fallback logic), authenticated recent jobs calls failing with 401, Socket.IO connection churn, and aggressive polling causing notification rate limiting. The file chains above map each issue from the Vercel-rendered frontend through the gateway, microservices, and down to the Mongo collections involved.

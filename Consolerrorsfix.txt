Kelmah Console Error Trace — 9 Oct 2025
=======================================

Summary
-------
- Repeated 5xx responses surfaced on the worker dashboard while loading availability, profile completeness, analytics, and job metrics.
- A recurring WebSocket handshake failure prevented the notifications channel from staying open; the client retried every few seconds and continued polling the REST API as a fallback.
- One worker-dashboard request path returned 401 because the API gateway/service rejected it without an authenticated user context.

Detailed Error Chains
---------------------

1. WebSocket closed before the connection was established (`wss://kelmah-api-gateway-qlyk.onrender.com/socket.io?...`)
	 - Frontend flow
		 - [OK] `kelmah-frontend/src/main.jsx` — wraps the app in `NotificationProvider`.
		 - [OK] `kelmah-frontend/src/modules/notifications/contexts/NotificationContext.jsx` — calls `notificationService.connect()` during provider mount.
		 - [✅] `kelmah-frontend/src/modules/notifications/services/notificationService.js` — now uses `kelmah-api-gateway-qlyk.onrender.com` as production fallback, matching the current runtime-config deployment URL. Client will no longer attempt the outdated `5loa` host.
	 - Gateway + service flow
		 - [OK] `kelmah-backend/api-gateway/server.js` — proxies `/socket.io` traffic to the messaging service (requires `services.messaging` to be reachable).
		 - [ℹ] `kelmah-backend/services/messaging-service/server.js` — Socket.IO server must be running; if it is cold or the Render instance is asleep, the proxy closes the connection before upgrade completes (expected behavior for free-tier cold starts).
		 - [ℹ] `kelmah-backend/services/messaging-service/socket/messageSocket.js` & related handlers — depend on a live MongoDB connection before acknowledging clients.
	 - Database touchpoints
		 - MongoDB database `kelmah_platform`: collections `notifications`, `messages`, `conversations` (via messaging-service models).
	 - Notes
		 - Confirm the messaging service uptime on Render and ensure it stays warm during active usage. WebSocket reconnection logic handles cold starts gracefully with retry backoff.

2. 500 GET `/api/users/workers/6891595768c3cdade00f564f/availability`
	 - Frontend flow
		 - [OK] `kelmah-frontend/src/modules/worker/pages/WorkerDashboardPage.jsx` — renders the enhanced worker dashboard.
		 - [OK] `kelmah-frontend/src/modules/dashboard/components/worker/EnhancedWorkerDashboard.jsx` — mounts dashboard widgets.
		 - [OK] `kelmah-frontend/src/modules/dashboard/components/worker/AvailabilityStatus.jsx` — invokes the service call on mount.
		 - [OK] `kelmah-frontend/src/modules/worker/services/workerService.js#getWorkerAvailability` — sends `GET /api/users/workers/{id}/availability` through the shared axios client and retries on failure.
	 - Gateway + service flow
		 - [OK] `kelmah-backend/api-gateway/server.js` — rewrites `/api/users/*` to user-service with service-trust headers.
		 - [OK] `kelmah-backend/services/user-service/routes/user.routes.js` — maps `/workers/:id/availability` and logs the request.
		 - [✅] `kelmah-backend/services/user-service/controllers/worker.controller.js#getWorkerAvailability` — already fixed in earlier session (Oct 9 2025). Now queries `Availability.findOne({ user: workerId })` with connection guard, returns normalized `daySlots` response, and handles missing availability documents gracefully with defaults.
		 - [ℹ] `kelmah-backend/services/user-service/models/Availability.js` — schema correctly defines `{ user: ObjectId }` reference; controller now aligns with this field.
	 - Database touchpoints
		 - MongoDB `kelmah_platform.availabilities` collection.
	 - Notes
		 - This endpoint was already resolved in a prior session. If 500s persist, check Render logs for model registration or connection timing issues during cold starts.

3. 500 GET `/api/users/workers/6891595768c3cdade00f564f/completeness`
	 - Frontend flow
		 - [OK] `EnhancedWorkerDashboard.jsx` — calls `workerService.getWorkerStats(userId)` while loading profile completion.
		 - [OK] `kelmah-frontend/src/modules/worker/services/workerService.js#getWorkerStats` — delegates to `/api/users/workers/{id}/completeness`.
	 - Gateway + service flow
		 - [OK] API gateway route as above.
		 - [OK] `user.routes.js` — forwards to controller with `verifyGatewayRequest`.
		- [✅] `kelmah-backend/services/user-service/controllers/worker.controller.js#getProfileCompletion` — now awaits `ensureConnection`, reloads shared models on-demand, merges `User` and `WorkerProfile` payloads, and tolerates missing arrays to prevent null dereferences.
		- [ℹ] `kelmah-backend/services/user-service/models/index.js` — still responsible for registering shared schemas on the active connection before queries run; examine logs if initialization warnings reappear.
	 - Database touchpoints
		 - MongoDB `kelmah_platform.users` collection.
	 - Notes
		 - Check Render logs to confirm whether a `Cannot read properties of undefined` error occurs when optional arrays (e.g., `worker.skills`) are undefined.

4. 500 GET `/api/users/dashboard/analytics`
	 - Frontend flow
		 - [OK] `EnhancedWorkerDashboard.jsx` — dispatches `fetchDashboardData()` from Redux to assemble dashboard metrics.
		 - [OK] `kelmah-frontend/src/modules/dashboard/services/dashboardSlice.js` — issues `userServiceClient.get('/api/users/dashboard/analytics')` and falls back to mock data only when the promise rejects.
	 - Gateway + service flow
		 - [OK] API gateway `/api/users` proxy.
		 - [OK] `user.routes.js` — route uses `verifyGatewayRequest` and forwards to controller.
		- [✅] `kelmah-backend/services/user-service/controllers/user.controller.js#getDashboardAnalytics` — now enforces connection readiness, reloads consolidated models when absent, aggregates monthly growth in one pipeline, and wraps job-service axios calls with fallbacks so errors no longer propagate as 500s.
		 - [⚠] External dependency `JOB_SERVICE_URL` — if unset, axios defaults to `http://localhost:5003`, which fails on Render and may throw if not caught.
	 - Database touchpoints
		 - MongoDB `kelmah_platform.users` and `kelmah_platform.workerprofiles` collections.
	 - Notes
		 - Review controller logs to ensure axios errors are caught and converted to mock data as intended.

5. 500 GET `/api/users/dashboard/metrics`
	 - Frontend flow
		 - Same Redux action as above.
	 - Gateway + service flow
		 - [OK] Proxy and route identical to analytics request.
		 - [✅] `user.controller.js#getDashboardMetrics` — now enforces connection readiness, reloads shared models on demand, wraps counts with `Promise.allSettled`, and returns fallback metrics instead of propagating 500s. Job-service calls remain optional with safe fallbacks.
		 - [ℹ] `kelmah-backend/services/user-service/models/WorkerProfileMongo.js` — still relies on consolidated model registration; monitor logs if initialization warnings return.
	 - Database touchpoints
		 - MongoDB `kelmah_platform.users`, `kelmah_platform.workerprofiles`.
	 - Notes
		 - Confirm the Render environment has `JOB_SERVICE_URL` pointing to the deployed job service; otherwise the axios request times out and may bubble up.

6. 500 GET `/api/jobs/dashboard`
	 - Frontend flow
		 - [OK] `dashboardSlice.js` — calls `jobServiceClient.get('/api/jobs/dashboard')` while assembling dashboard cards.
	 - Gateway + service flow
		 - [OK] `kelmah-backend/api-gateway/server.js` — proxies `/api/jobs/*` without additional rewrite.
		 - [OK] `kelmah-backend/services/job-service/routes/job.routes.js` — maps `/dashboard` with `verifyGatewayRequest`.
		 - [✅] `kelmah-backend/services/job-service/controllers/job.controller.js#getDashboardJobs` — now guards database readiness, uses `Promise.allSettled` for counts, and falls back to curated sample jobs instead of surfacing connection/query failures as 500s.
		 - [ℹ] `kelmah-backend/services/job-service/models/Job.js` — continues to leverage the shared model on the active connection; keep an eye on logs for model registration regressions.
	 - Database touchpoints
		 - MongoDB `kelmah_platform.jobs` collection.
	 - Notes
		 - Check job-service logs for `Operation Job.find()` timeouts indicating the service is still reconnecting when the dashboard loads.

7. 401 GET `/api/users/workers/jobs/recent?limit=6`
	 - Frontend flow
		 - [OK] `EnhancedWorkerDashboard.jsx` — attempts to load recent jobs for the signed-in worker.
		 - [OK] `workerService.js#getWorkerJobs` — hits `/api/users/workers/jobs/recent` with optional `limit` parameter.
	 - Gateway + service flow
		 - [OK] API gateway proxies request.
		 - [OK] `user.routes.js` — logs the hit then hands off to controller.
		 - [OK] `kelmah-backend/services/user-service/controllers/worker.controller.js#getRecentJobs` — explicitly requires `req.user?.id`; without a verified gateway token the controller returns 401.
	 - Root cause
		 - The frontend request did not include a valid bearer token (likely due to expired session or missing storage) at the time of the call, so the service correctly rejected it. Once the WebSocket/axios token refresh succeeds, this endpoint should succeed.

Action Items
------------
- ✅ Oct 9 2025 update: WebSocket fallback URL in `notificationService.js` updated to `kelmah-api-gateway-qlyk.onrender.com` matching current production runtime-config. Connection mismatches resolved.
- ✅ Oct 9 2025 update: `worker.controller.js#getWorkerAvailability` confirmed already fixed (queries `{ user: workerId }`, waits for `ensureConnection`, normalizes response).
- ✅ Oct 9 2025 update: `worker.controller.js#getProfileCompletion` enforces connection readiness, reloads models on demand, and merges user/profile data with resilient recommendations output.
- ✅ Oct 9 2025 update: `user.controller.js#getDashboardAnalytics` guards model access, aggregates growth in one pipeline, and wraps job-service axios calls with safe fallbacks.
- ✅ Oct 9 2025 update: `user.controller.js#getDashboardMetrics` mirrors the analytics safeguards, returning fallback metrics when counts fail and preserving uptime during job-service outages.
- ✅ Oct 9 2025 update: `job.controller.js#getDashboardJobs` enforces database readiness and serves curated fallback jobs when queries fail, preventing dashboard 500s.
- Confirm Render environment variables (`JOB_SERVICE_URL`, `API_GATEWAY_URL`, `MESSAGING_SERVICE_URL`) point to live instances so cross-service axios calls do not default to localhost.
- Monitor messaging service cold starts on Render; WebSocket reconnection logic handles temporary disconnects gracefully.

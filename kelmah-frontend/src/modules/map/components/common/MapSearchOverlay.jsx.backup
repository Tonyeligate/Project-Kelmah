import React, { useState, useEffect, useCallback } from 'react';
import {
  Box,
  Paper,
  TextField,
  InputAdornment,
  IconButton,
  Typography,
  Chip,
  Button,
  Collapse,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Slider,
  FormControlLabel,
  Switch,
  List,
  ListItem,
  ListItemText,
  ListItemAvatar,
  Avatar,
  Divider,
  Grid,
  Card,
  useTheme,
  useMediaQuery,
} from '@mui/material';
import {
  Search as SearchIcon,
  Clear as ClearIcon,
  FilterList as FilterIcon,
  ExpandMore as ExpandMoreIcon,
  ExpandLess as ExpandLessIcon,
  LocationOn as LocationIcon,
  Work as JobIcon,
  Person as WorkerIcon,
  Star as StarIcon,
  Verified as VerifiedIcon,
  TrendingUp as TrendingUpIcon,
  TrendingDown as TrendingDownIcon,
  Refresh as RefreshIcon,
  MyLocation as MyLocationIcon,
  Category as CategoryIcon,
  AttachMoney as MoneyIcon,
  Schedule as ScheduleIcon,
} from '@mui/icons-material';
import { motion, AnimatePresence } from 'framer-motion';

const MapSearchOverlay = ({
  searchQuery = '',
  setSearchQuery,
  filters = {},
  setFilters,
  onSearch,
  onClearFilters,
  viewType = 'jobs',
  setViewType,
  status = {},
  resultsCount = 0,
  loading = false,
  onLocationSearch,
  onGetCurrentLocation,
}) => {
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));
  const [expandedFilters, setExpandedFilters] = useState(false);
  const [showSuggestions, setShowSuggestions] = useState(false);
  const [suggestions, setSuggestions] = useState([]);

  // Mock suggestions
  const mockSuggestions = [
    { id: 1, text: 'Accra, Ghana', type: 'location' },
    { id: 2, text: 'Kumasi, Ghana', type: 'location' },
    { id: 3, text: 'Electrical', type: 'category' },
    { id: 4, text: 'Plumbing', type: 'category' },
    { id: 5, text: 'Catering', type: 'category' },
  ];

  // Handle search input change
  const handleSearchChange = useCallback((event) => {
    const value = event.target.value;
    setSearchQuery(value);
    
    if (value.length > 2) {
      setSuggestions(mockSuggestions.filter(s => 
        s.text.toLowerCase().includes(value.toLowerCase())
      ));
      setShowSuggestions(true);
    } else {
      setShowSuggestions(false);
    }
  }, [setSearchQuery]);

  // Handle suggestion click
  const handleSuggestionClick = useCallback((suggestion) => {
    setSearchQuery(suggestion.text);
    setShowSuggestions(false);
    if (onLocationSearch) {
      onLocationSearch(suggestion.text);
    }
  }, [setSearchQuery, onLocationSearch]);

  // Handle get current location
  const handleGetCurrentLocation = useCallback(() => {
    if (onGetCurrentLocation) {
      onGetCurrentLocation();
    }
  }, [onGetCurrentLocation]);

  // Handle filter change
  const handleFilterChange = useCallback((key, value) => {
    setFilters(prev => ({ ...prev, [key]: value }));
  }, [setFilters]);

  // Handle clear filters
  const handleClearFilters = useCallback(() => {
    setFilters({
      category: '',
      distance: 50,
      sortBy: 'relevance',
      priceRange: [0, 1000],
      verifiedOnly: false,
      urgentOnly: false,
    });
    setSearchQuery('');
  }, [setFilters, setSearchQuery]);

  // Handle search
  const handleSearch = useCallback(() => {
    setShowSuggestions(false);
    if (onSearch) {
      onSearch();
    }
  }, [onSearch]);

  // Mock categories
  const categories = [
    'Carpentry',
    'Electrical',
    'Plumbing',
    'Catering',
    'Painting',
    'Welding',
    'HVAC',
    'Security',
    'Landscaping',
    'Roofing',
  ];

  // Mock sort options
  const sortOptions = [
    { value: 'relevance', label: 'Relevance' },
    { value: 'distance', label: 'Distance' },
    { value: 'rating', label: 'Rating' },
    { value: 'price', label: 'Price' },
    { value: 'date', label: 'Date Posted' },
  ];

  return (
    <Paper
      sx={{
        position: 'absolute',
        top: 16,
        left: 16,
        width: isMobile ? 'calc(100% - 32px)' : 350,
        maxHeight: 'calc(100vh - 32px)',
        overflow: 'auto',
        background: `linear-gradient(135deg, ${theme.palette.background.paper} 0%, ${theme.palette.background.default} 100%)`,
        border: `1px solid ${theme.palette.divider}`,
        borderRadius: 2,
        zIndex: 10,
        boxShadow: '0 4px 20px rgba(0,0,0,0.1)',
      }}
    >
      <Box sx={{ p: 2, borderBottom: `1px solid ${theme.palette.divider}` }}>
        <Typography variant="h6" sx={{ fontWeight: 'bold', mb: 2 }}>
          Search & Filters
        </Typography>
        
        {/* Search Bar */}
        <Box sx={{ position: 'relative', mb: 2 }}>
          <TextField
            fullWidth
            placeholder="Search jobs, workers, location..."
            value={searchQuery}
            onChange={handleSearchChange}
            InputProps={{
              startAdornment: (
                <InputAdornment position="start">
                  <SearchIcon />
                </InputAdornment>
              ),
              endAdornment: (
                <InputAdornment position="end">
                  <IconButton size="small" onClick={handleGetCurrentLocation}>
                    <MyLocationIcon />
                  </IconButton>
                  <IconButton size="small" onClick={handleSearch}>
                    <RefreshIcon />
                  </IconButton>
                </InputAdornment>
              ),
            }}
            sx={{ mb: 1 }}
          />

          {/* Search Suggestions */}
          <AnimatePresence>
            {showSuggestions && (
              <motion.div
                initial={{ opacity: 0, y: -10 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: -10 }}
                transition={{ duration: 0.2 }}
              >
                <Paper
                  sx={{
                    position: 'absolute',
                    top: '100%',
                    left: 0,
                    right: 0,
                    zIndex: 1000,
                    maxHeight: 200,
                    overflow: 'auto',
                    boxShadow: '0 4px 20px rgba(0,0,0,0.15)',
                  }}
                >
                  <List dense>
                    {suggestions.map((suggestion) => (
                      <ListItem
                        key={suggestion.id}
                        button
                        onClick={() => handleSuggestionClick(suggestion)}
                        sx={{
                          '&:hover': {
                            backgroundColor: theme.palette.action.hover,
                          },
                        }}
                      >
                        <ListItemAvatar>
                          <Avatar sx={{ width: 24, height: 24 }}>
                            {suggestion.type === 'location' ? <LocationIcon /> : <CategoryIcon />}
                          </Avatar>
                        </ListItemAvatar>
                        <ListItemText
                          primary={suggestion.text}
                          secondary={suggestion.type === 'location' ? 'Location' : 'Category'}
                        />
                      </ListItem>
                    ))}
                  </List>
                </Paper>
              </motion.div>
            )}
          </AnimatePresence>
        </Box>

        {/* Status Cards */}
        <Grid container spacing={1} sx={{ mb: 2 }}>
          {Object.entries(status).map(([key, data]) => (
            <Grid item xs={6} key={key}>
              <motion.div
                initial={{ opacity: 0, scale: 0.8 }}
                animate={{ opacity: 1, scale: 1 }}
                transition={{ duration: 0.3 }}
              >
                <Card
                  sx={{
                    background: `linear-gradient(135deg, ${theme.palette.background.paper} 0%, ${data.color}11 100%)`,
                    border: `1px solid ${data.color}33`,
                    borderRadius: 2,
                    p: 1.5,
                    textAlign: 'center',
                  }}
                >
                  <Typography variant="h6" sx={{ fontWeight: 'bold', color: data.color }}>
                    {data.count}
                  </Typography>
                  <Typography variant="caption" sx={{ textTransform: 'capitalize' }}>
                    {key}
                  </Typography>
                  <Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'center', mt: 0.5 }}>
                    {data.trend > 0 ? (
                      <TrendingUpIcon sx={{ color: '#4CAF50', fontSize: 12 }} />
                    ) : (
                      <TrendingDownIcon sx={{ color: '#F44336', fontSize: 12 }} />
                    )}
                    <Typography variant="caption" sx={{ color: data.trend > 0 ? '#4CAF50' : '#F44336' }}>
                      {Math.abs(data.trend)}%
                    </Typography>
                  </Box>
                </Card>
              </motion.div>
            </Grid>
          ))}
        </Grid>

        {/* View Type Toggle */}
        <Box sx={{ mb: 2 }}>
          <Typography variant="subtitle2" sx={{ mb: 1, fontWeight: 'bold' }}>
            View Type
          </Typography>
          <Box sx={{ display: 'flex', gap: 1 }}>
            <Button
              variant={viewType === 'jobs' ? 'contained' : 'outlined'}
              startIcon={<JobIcon />}
              onClick={() => setViewType('jobs')}
              sx={{ flex: 1 }}
            >
              Jobs
            </Button>
            <Button
              variant={viewType === 'workers' ? 'contained' : 'outlined'}
              startIcon={<WorkerIcon />}
              onClick={() => setViewType('workers')}
              sx={{ flex: 1 }}
            >
              Workers
            </Button>
          </Box>
        </Box>

        {/* Results Summary */}
        <Box sx={{ display: 'flex', alignItems: 'center', mb: 2 }}>
          <Box
            sx={{
              width: 12,
              height: 12,
              borderRadius: '50%',
              backgroundColor: '#4CAF50',
              mr: 1,
            }}
          />
          <Typography variant="body2">
            Live Results {resultsCount}
          </Typography>
        </Box>

        {/* Advanced Filters Button */}
        <Button
          fullWidth
          variant="outlined"
          startIcon={<FilterIcon />}
          endIcon={expandedFilters ? <ExpandLessIcon /> : <ExpandMoreIcon />}
          onClick={() => setExpandedFilters(!expandedFilters)}
          sx={{ mb: 2 }}
        >
          Advanced Filters
        </Button>
      </Box>

      {/* Advanced Filters */}
      <Collapse in={expandedFilters}>
        <Box sx={{ p: 2, borderTop: `1px solid ${theme.palette.divider}` }}>
          {/* Category Filter */}
          <FormControl fullWidth sx={{ mb: 2 }}>
            <InputLabel>Category</InputLabel>
            <Select
              value={filters.category || ''}
              onChange={(e) => handleFilterChange('category', e.target.value)}
              label="Category"
            >
              <MenuItem value="">All Categories</MenuItem>
              {categories.map((category) => (
                <MenuItem key={category} value={category}>{category}</MenuItem>
              ))}
            </Select>
          </FormControl>

          {/* Distance Filter */}
          <Box sx={{ mb: 2 }}>
            <Typography variant="subtitle2" sx={{ mb: 1, fontWeight: 'bold' }}>
              Distance: {filters.distance || 50}km
            </Typography>
            <Slider
              value={filters.distance || 50}
              onChange={(e, value) => handleFilterChange('distance', value)}
              min={1}
              max={100}
              marks={[
                { value: 1, label: '1km' },
                { value: 25, label: '25km' },
                { value: 50, label: '50km' },
                { value: 100, label: '100km' },
              ]}
              valueLabelDisplay="auto"
            />
          </Box>

          {/* Price Range Filter */}
          <Box sx={{ mb: 2 }}>
            <Typography variant="subtitle2" sx={{ mb: 1, fontWeight: 'bold' }}>
              Price Range: ${filters.priceRange?.[0] || 0} - ${filters.priceRange?.[1] || 1000}
            </Typography>
            <Slider
              value={filters.priceRange || [0, 1000]}
              onChange={(e, value) => handleFilterChange('priceRange', value)}
              min={0}
              max={1000}
              valueLabelDisplay="auto"
            />
          </Box>

          {/* Sort By Filter */}
          <FormControl fullWidth sx={{ mb: 2 }}>
            <InputLabel>Sort By</InputLabel>
            <Select
              value={filters.sortBy || 'relevance'}
              onChange={(e) => handleFilterChange('sortBy', e.target.value)}
              label="Sort By"
            >
              {sortOptions.map((option) => (
                <MenuItem key={option.value} value={option.value}>
                  {option.label}
                </MenuItem>
              ))}
            </Select>
          </FormControl>

          {/* Additional Filters */}
          <Box sx={{ mb: 2 }}>
            <FormControlLabel
              control={
                <Switch
                  checked={filters.verifiedOnly || false}
                  onChange={(e) => handleFilterChange('verifiedOnly', e.target.checked)}
                />
              }
              label="Verified Only"
            />
            <FormControlLabel
              control={
                <Switch
                  checked={filters.urgentOnly || false}
                  onChange={(e) => handleFilterChange('urgentOnly', e.target.checked)}
                />
              }
              label="Urgent Jobs Only"
            />
          </Box>

          {/* Action Buttons */}
          <Box sx={{ display: 'flex', gap: 1 }}>
            <Button
              fullWidth
              variant="outlined"
              startIcon={<ClearIcon />}
              onClick={handleClearFilters}
            >
              Clear
            </Button>
            <Button
              fullWidth
              variant="contained"
              onClick={handleSearch}
              disabled={loading}
            >
              {loading ? 'Searching...' : 'Apply'}
            </Button>
          </Box>
        </Box>
      </Collapse>

      {/* Live Results List */}
      <Box sx={{ p: 2, borderTop: `1px solid ${theme.palette.divider}` }}>
        <Typography variant="h6" sx={{ mb: 2, fontWeight: 'bold' }}>
          Live Results
        </Typography>
        <Box sx={{ maxHeight: 300, overflow: 'auto' }}>
          {/* Mock results - in real implementation, this would be populated with actual data */}
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            transition={{ duration: 0.3 }}
          >
            <Typography variant="body2" color="text.secondary" sx={{ textAlign: 'center', py: 4 }}>
              {resultsCount > 0 
                ? `${resultsCount} ${viewType} found in your area`
                : 'No results found. Try adjusting your filters.'
              }
            </Typography>
          </motion.div>
        </Box>
      </Box>
    </Paper>
  );
};

export default MapSearchOverlay;

import React, { useState, useEffect, useCallback, useMemo } from 'react';
import {
  Box,
  Paper,
  Typography,
  IconButton,
  Tooltip,
  Badge,
  Chip,
  Card,
  CardContent,
  Avatar,
  Button,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  List,
  ListItem,
  ListItemText,
  ListItemAvatar,
  Divider,
  LinearProgress,
  CircularProgress,
  Grid,
  useTheme,
  useMediaQuery,
} from '@mui/material';
import {
  LocationOn as LocationIcon,
  Work as JobIcon,
  Person as WorkerIcon,
  Star as StarIcon,
  Verified as VerifiedIcon,
  Schedule as ScheduleIcon,
  AttachMoney as MoneyIcon,
  Visibility as VisibilityIcon,
  TrendingUp as TrendingUpIcon,
  TrendingDown as TrendingDownIcon,
  ZoomIn as ZoomInIcon,
  ZoomOut as ZoomOutIcon,
  MyLocation as MyLocationIcon,
  Layers as LayersIcon,
  FilterList as FilterIcon,
  Close as CloseIcon,
  Fullscreen as FullscreenIcon,
  FullscreenExit as FullscreenExitIcon,
  Refresh as RefreshIcon,
  Add as AddIcon,
  Remove as RemoveIcon,
  CheckCircle as CheckCircleIcon,
  Warning as WarningIcon,
  PriorityHigh as PriorityHighIcon,
  LocalOffer as LocalOfferIcon,
} from '@mui/icons-material';
import { motion, AnimatePresence } from 'framer-motion';

// Map Marker Component
const MapMarker = ({ 
  item, 
  type, 
  onClick, 
  isSelected, 
  index,
  theme 
}) => {
  const [isHovered, setIsHovered] = useState(false);

  const getMarkerColor = () => {
    if (type === 'jobs') {
      if (item.urgency === 'urgent') return '#F44336';
      if (item.urgency === 'high') return '#FF9800';
      return '#4CAF50';
    } else {
      if (item.verified) return '#2196F3';
      if (item.rating >= 4.5) return '#FFC107';
      return '#9E9E9E';
    }
  };

  const getMarkerIcon = () => {
    return type === 'jobs' ? <JobIcon /> : <WorkerIcon />;
  };

  return (
    <motion.div
      initial={{ scale: 0, opacity: 0 }}
      animate={{ scale: 1, opacity: 1 }}
      transition={{ duration: 0.3, delay: index * 0.1 }}
      whileHover={{ scale: 1.1 }}
      style={{
        position: 'absolute',
        left: `${20 + (index * 15) % 60}%`,
        top: `${30 + (index * 20) % 40}%`,
        zIndex: isSelected ? 10 : 5,
      }}
    >
      <Tooltip
        title={
          <Box>
            <Typography variant="subtitle2" sx={{ fontWeight: 'bold' }}>
              {item.title || item.name}
            </Typography>
            <Typography variant="caption">
              {item.location.address}
            </Typography>
            {type === 'jobs' && (
              <Typography variant="caption" sx={{ display: 'block' }}>
                Budget: {item.budget}
              </Typography>
            )}
            {type === 'workers' && (
              <Typography variant="caption" sx={{ display: 'block' }}>
                Rate: {item.hourlyRate}
              </Typography>
            )}
          </Box>
        }
        arrow
        placement="top"
      >
        <IconButton
          onClick={() => onClick(item)}
          onMouseEnter={() => setIsHovered(true)}
          onMouseLeave={() => setIsHovered(false)}
          sx={{
            background: isSelected 
              ? theme.palette.secondary.main 
              : getMarkerColor(),
            color: 'white',
            width: isSelected ? 56 : 48,
            height: isSelected ? 56 : 48,
            border: isSelected 
              ? `3px solid ${theme.palette.secondary.light}` 
              : '2px solid white',
            boxShadow: isHovered || isSelected 
              ? '0 4px 20px rgba(0,0,0,0.3)' 
              : '0 2px 8px rgba(0,0,0,0.2)',
            '&:hover': {
              background: isSelected 
                ? theme.palette.secondary.dark 
                : getMarkerColor(),
              transform: 'scale(1.1)',
            },
            transition: 'all 0.2s ease',
          }}
        >
          {getMarkerIcon()}
        </IconButton>
      </Tooltip>

      {/* Status indicators */}
      {type === 'jobs' && item.urgency === 'urgent' && (
        <Box
          sx={{
            position: 'absolute',
            top: -8,
            right: -8,
            width: 16,
            height: 16,
            borderRadius: '50%',
            background: '#F44336',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
            animation: 'pulse 2s infinite',
            '@keyframes pulse': {
              '0%': { transform: 'scale(1)', opacity: 1 },
              '50%': { transform: 'scale(1.2)', opacity: 0.7 },
              '100%': { transform: 'scale(1)', opacity: 1 },
            },
          }}
        >
          <PriorityHighIcon sx={{ fontSize: 10, color: 'white' }} />
        </Box>
      )}

      {type === 'workers' && item.verified && (
        <Box
          sx={{
            position: 'absolute',
            top: -8,
            right: -8,
            width: 16,
            height: 16,
            borderRadius: '50%',
            background: '#2196F3',
            display: 'flex',
            alignItems: 'center',
            justifyContent: 'center',
          }}
        >
          <VerifiedIcon sx={{ fontSize: 10, color: 'white' }} />
        </Box>
      )}
    </motion.div>
  );
};

// Map Controls Component
const MapControls = ({ 
  onZoomIn, 
  onZoomOut, 
  onCenter, 
  onRefresh,
  onToggleLayers,
  showLayers,
  theme 
}) => {
  return (
    <Box
      sx={{
        position: 'absolute',
        bottom: 16,
        right: 16,
        display: 'flex',
        flexDirection: 'column',
        gap: 1,
        zIndex: 10,
      }}
    >
      <Tooltip title="Zoom In">
        <IconButton
          onClick={onZoomIn}
          sx={{
            background: 'rgba(0,0,0,0.7)',
            color: 'white',
            '&:hover': { background: 'rgba(0,0,0,0.8)' },
          }}
        >
          <ZoomInIcon />
        </IconButton>
      </Tooltip>

      <Tooltip title="Zoom Out">
        <IconButton
          onClick={onZoomOut}
          sx={{
            background: 'rgba(0,0,0,0.7)',
            color: 'white',
            '&:hover': { background: 'rgba(0,0,0,0.8)' },
          }}
        >
          <ZoomOutIcon />
        </IconButton>
      </Tooltip>

      <Tooltip title="My Location">
        <IconButton
          onClick={onCenter}
          sx={{
            background: 'rgba(0,0,0,0.7)',
            color: 'white',
            '&:hover': { background: 'rgba(0,0,0,0.8)' },
          }}
        >
          <MyLocationIcon />
        </IconButton>
      </Tooltip>

      <Tooltip title="Toggle Layers">
        <IconButton
          onClick={onToggleLayers}
          sx={{
            background: showLayers ? theme.palette.primary.main : 'rgba(0,0,0,0.7)',
            color: 'white',
            '&:hover': { background: theme.palette.primary.dark },
          }}
        >
          <LayersIcon />
        </IconButton>
      </Tooltip>

      <Tooltip title="Refresh">
        <IconButton
          onClick={onRefresh}
          sx={{
            background: 'rgba(0,0,0,0.7)',
            color: 'white',
            '&:hover': { background: 'rgba(0,0,0,0.8)' },
          }}
        >
          <RefreshIcon />
        </IconButton>
      </Tooltip>
    </Box>
  );
};

// Item Details Dialog
const ItemDetailsDialog = ({ 
  item, 
  type, 
  open, 
  onClose, 
  theme 
}) => {
  if (!item) return null;

  return (
    <Dialog
      open={open}
      onClose={onClose}
      maxWidth="sm"
      fullWidth
      PaperProps={{
        sx: {
          background: `linear-gradient(135deg, ${theme.palette.background.paper} 0%, ${theme.palette.background.default} 100%)`,
          borderRadius: 3,
        },
      }}
    >
      <DialogTitle>
        <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
          <Box sx={{ display: 'flex', alignItems: 'center' }}>
            <Avatar
              sx={{
                bgcolor: type === 'jobs' ? theme.palette.primary.main : theme.palette.secondary.main,
                mr: 2,
              }}
            >
              {type === 'jobs' ? <JobIcon /> : <WorkerIcon />}
            </Avatar>
            <Box>
              <Typography variant="h6" sx={{ fontWeight: 'bold' }}>
                {item.title || item.name}
              </Typography>
              <Typography variant="body2" color="text.secondary">
                {item.category}
              </Typography>
            </Box>
          </Box>
          <IconButton onClick={onClose}>
            <CloseIcon />
          </IconButton>
        </Box>
      </DialogTitle>

      <DialogContent>
        <Box sx={{ mb: 2 }}>
          <Typography variant="body1" sx={{ mb: 2 }}>
            {item.description || `${item.category} professional`}
          </Typography>

          {/* Key Information */}
          <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 2, mb: 2 }}>
            <Box sx={{ display: 'flex', alignItems: 'center' }}>
              <LocationIcon sx={{ mr: 1, color: 'text.secondary' }} />
              <Typography variant="body2">
                {item.location.address}
              </Typography>
            </Box>
            <Box sx={{ display: 'flex', alignItems: 'center' }}>
              <MoneyIcon sx={{ mr: 1, color: 'text.secondary' }} />
              <Typography variant="body2">
                {type === 'jobs' ? item.budget : item.hourlyRate}
              </Typography>
            </Box>
            {type === 'workers' && (
              <Box sx={{ display: 'flex', alignItems: 'center' }}>
                <StarIcon sx={{ mr: 1, color: 'text.secondary' }} />
                <Typography variant="body2">
                  {item.rating} Rating
                </Typography>
              </Box>
            )}
            {type === 'jobs' && (
              <Box sx={{ display: 'flex', alignItems: 'center' }}>
                <VisibilityIcon sx={{ mr: 1, color: 'text.secondary' }} />
                <Typography variant="body2">
                  {item.views} Views
                </Typography>
              </Box>
            )}
          </Box>

          {/* Skills */}
          <Typography variant="subtitle2" sx={{ mb: 1, fontWeight: 'bold' }}>
            Skills & Requirements
          </Typography>
          <Box sx={{ display: 'flex', flexWrap: 'wrap', gap: 1, mb: 2 }}>
            {item.skills?.map((skill) => (
              <Chip
                key={skill}
                label={skill}
                size="small"
                variant="outlined"
                sx={{ borderRadius: 2 }}
              />
            ))}
          </Box>

          {/* Status Indicators */}
          <Box sx={{ display: 'flex', gap: 1, mb: 2 }}>
            {type === 'jobs' && item.urgency === 'urgent' && (
              <Chip
                icon={<PriorityHighIcon />}
                label="Urgent"
                color="error"
                size="small"
              />
            )}
            {type === 'workers' && item.verified && (
              <Chip
                icon={<VerifiedIcon />}
                label="Verified"
                color="primary"
                size="small"
              />
            )}
            {type === 'workers' && item.rating >= 4.5 && (
              <Chip
                icon={<StarIcon />}
                label="Top Rated"
                color="warning"
                size="small"
              />
            )}
          </Box>

          {/* Additional Details */}
          {type === 'workers' && (
            <Box sx={{ mb: 2 }}>
              <Typography variant="subtitle2" sx={{ mb: 1, fontWeight: 'bold' }}>
                Professional Details
              </Typography>
              <List dense>
                <ListItem>
                  <ListItemText
                    primary="Completed Jobs"
                    secondary={item.completedJobs}
                  />
                </ListItem>
                <ListItem>
                  <ListItemText
                    primary="Response Time"
                    secondary={item.responseTime}
                  />
                </ListItem>
                <ListItem>
                  <ListItemText
                    primary="Availability"
                    secondary={item.availability}
                  />
                </ListItem>
              </List>
            </Box>
          )}

          {type === 'jobs' && (
            <Box sx={{ mb: 2 }}>
              <Typography variant="subtitle2" sx={{ mb: 1, fontWeight: 'bold' }}>
                Job Details
              </Typography>
              <List dense>
                <ListItem>
                  <ListItemText
                    primary="Posted"
                    secondary={item.posted}
                  />
                </ListItem>
                <ListItem>
                  <ListItemText
                    primary="Applications"
                    secondary={item.applications}
                  />
                </ListItem>
                {item.client && (
                  <ListItem>
                    <ListItemText
                      primary="Client"
                      secondary={`${item.client.name} (${item.client.rating}★)`}
                    />
                  </ListItem>
                )}
              </List>
            </Box>
          )}
        </Box>
      </DialogContent>

      <DialogActions sx={{ p: 2 }}>
        <Button onClick={onClose} variant="outlined">
          Close
        </Button>
        <Button variant="contained" color="primary">
          {type === 'jobs' ? 'Apply Now' : 'Contact Professional'}
        </Button>
      </DialogActions>
    </Dialog>
  );
};

// Main Interactive Map Component
const InteractiveMap = ({
  data = [],
  viewType = 'jobs',
  onMarkerClick,
  center = { lat: 5.5600, lng: -0.2057 },
  zoom = 12,
  loading = false,
  onZoomIn,
  onZoomOut,
  onCenter,
  onRefresh,
  onToggleLayers,
  showLayers = false,
}) => {
  const theme = useTheme();
  const isMobile = useMediaQuery(theme.breakpoints.down('md'));
  const [selectedItem, setSelectedItem] = useState(null);
  const [isFullscreen, setIsFullscreen] = useState(false);

  const handleMarkerClick = useCallback((item) => {
    setSelectedItem(item);
    if (onMarkerClick) {
      onMarkerClick(item);
    }
  }, [onMarkerClick]);

  const handleCloseDialog = useCallback(() => {
    setSelectedItem(null);
  }, []);

  const handleZoomIn = useCallback(() => {
    if (onZoomIn) onZoomIn();
  }, [onZoomIn]);

  const handleZoomOut = useCallback(() => {
    if (onZoomOut) onZoomOut();
  }, [onZoomOut]);

  const handleCenter = useCallback(() => {
    if (onCenter) onCenter();
  }, [onCenter]);

  const handleRefresh = useCallback(() => {
    if (onRefresh) onRefresh();
  }, [onRefresh]);

  const handleToggleLayers = useCallback(() => {
    if (onToggleLayers) onToggleLayers();
  }, [onToggleLayers]);

  const handleToggleFullscreen = useCallback(() => {
    setIsFullscreen(!isFullscreen);
  }, [isFullscreen]);

  return (
    <Box
      sx={{
        position: 'relative',
        height: isFullscreen ? '100vh' : '100%',
        width: '100%',
        borderRadius: isFullscreen ? 0 : 2,
        overflow: 'hidden',
        background: `linear-gradient(135deg, ${theme.palette.background.paper} 0%, ${theme.palette.background.default} 100%)`,
        border: isFullscreen ? 'none' : `1px solid ${theme.palette.divider}`,
        zIndex: isFullscreen ? 9999 : 'auto',
      }}
    >
      {/* Map Background */}
      <Box
        sx={{
          height: '100%',
          width: '100%',
          background: `linear-gradient(45deg, ${theme.palette.primary.dark} 0%, ${theme.palette.secondary.main} 100%)`,
          display: 'flex',
          flexDirection: 'column',
          justifyContent: 'center',
          alignItems: 'center',
          position: 'relative',
          overflow: 'hidden',
        }}
      >
        {/* Animated Background Pattern */}
        <Box
          sx={{
            position: 'absolute',
            top: 0,
            left: 0,
            right: 0,
            bottom: 0,
            background: `
              radial-gradient(circle at 20% 80%, ${theme.palette.primary.main}22 0%, transparent 50%),
              radial-gradient(circle at 80% 20%, ${theme.palette.secondary.main}22 0%, transparent 50%),
              radial-gradient(circle at 40% 40%, ${theme.palette.primary.light}11 0%, transparent 50%)
            `,
            animation: 'pulse 4s ease-in-out infinite alternate',
            '@keyframes pulse': {
              '0%': { opacity: 0.3 },
              '100%': { opacity: 0.7 },
            },
          }}
        />

        {/* Map Content */}
        <Box
          sx={{
            position: 'relative',
            zIndex: 2,
            textAlign: 'center',
            color: 'white',
            width: '100%',
            height: '100%',
          }}
        >
          {/* Map Title */}
          <Box sx={{ position: 'absolute', top: 16, left: 16, zIndex: 10 }}>
            <motion.div
              initial={{ opacity: 0, y: -20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ duration: 0.5 }}
            >
              <Typography variant="h5" sx={{ fontWeight: 'bold', mb: 1 }}>
                Kelmah Professional Map
              </Typography>
              <Typography variant="body2" sx={{ opacity: 0.9 }}>
                Live tracking • {data.length} {viewType} found
              </Typography>
            </motion.div>
          </Box>

          {/* Interactive Markers */}
          <Box sx={{ position: 'relative', height: '100%', width: '100%' }}>
            <AnimatePresence>
              {data.map((item, index) => (
                <MapMarker
                  key={item.id}
                  item={item}
                  type={viewType}
                  onClick={handleMarkerClick}
                  isSelected={selectedItem?.id === item.id}
                  index={index}
                  theme={theme}
                />
              ))}
            </AnimatePresence>
          </Box>

          {/* Map Controls */}
          <MapControls
            onZoomIn={handleZoomIn}
            onZoomOut={handleZoomOut}
            onCenter={handleCenter}
            onRefresh={handleRefresh}
            onToggleLayers={handleToggleLayers}
            showLayers={showLayers}
            theme={theme}
          />

          {/* Fullscreen Toggle */}
          <IconButton
            onClick={handleToggleFullscreen}
            sx={{
              position: 'absolute',
              top: 16,
              right: 16,
              background: 'rgba(0,0,0,0.7)',
              color: 'white',
              zIndex: 10,
              '&:hover': { background: 'rgba(0,0,0,0.8)' },
            }}
          >
            {isFullscreen ? <FullscreenExitIcon /> : <FullscreenIcon />}
          </IconButton>
        </Box>
      </Box>

      {/* Loading Overlay */}
      {loading && (
        <Box
          sx={{
            position: 'absolute',
            top: 0,
            left: 0,
            right: 0,
            bottom: 0,
            background: 'rgba(0,0,0,0.7)',
            display: 'flex',
            justifyContent: 'center',
            alignItems: 'center',
            zIndex: 1000,
          }}
        >
          <Box sx={{ textAlign: 'center', color: 'white' }}>
            <CircularProgress color="inherit" sx={{ mb: 2 }} />
            <Typography variant="body1">
              Loading map data...
            </Typography>
          </Box>
        </Box>
      )}

      {/* Item Details Dialog */}
      <ItemDetailsDialog
        item={selectedItem}
        type={viewType}
        open={!!selectedItem}
        onClose={handleCloseDialog}
        theme={theme}
      />
    </Box>
  );
};

export default InteractiveMap;
